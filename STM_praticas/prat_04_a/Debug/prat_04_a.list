
prat_04_a.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000016a0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080017ac  080017ac  000117ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080017cc  080017cc  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080017cc  080017cc  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080017cc  080017cc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080017cc  080017cc  000117cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080017d0  080017d0  000117d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080017d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000044  20000010  080017e4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000054  080017e4  00020054  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003b70  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000115c  00000000  00000000  00023ba9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000458  00000000  00000000  00024d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003c0  00000000  00000000  00025160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015a85  00000000  00000000  00025520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000050bb  00000000  00000000  0003afa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007bda7  00000000  00000000  00040060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000bbe07  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000f38  00000000  00000000  000bbe5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08001794 	.word	0x08001794

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08001794 	.word	0x08001794

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b08e      	sub	sp, #56	; 0x38
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 8000152:	f000 fbaf 	bl	80008b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f9ff 	bl	8000558 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 fa5f 	bl	800061c <MX_GPIO_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800015e:	f000 fa40 	bl	80005e2 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  // garantir que PC13 começa desligado
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000162:	2201      	movs	r2, #1
 8000164:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000168:	48aa      	ldr	r0, [pc, #680]	; (8000414 <main+0x2c8>)
 800016a:	f000 fec4 	bl	8000ef6 <HAL_GPIO_WritePin>
    static enum {INI_D3, LIG_D3, DSLG_D3} sttD3=INI_D3; // var estados de D3
    static enum {INI_D4, LIG_D4, DSLG_D4} sttD4=INI_D4; // var estados de D4
    static enum {INI_PA1, LIG_PA1, DSLG_PA1} sttPA1=INI_PA1; // var estados de PA1

  // para controlar vars tempos de entrada na rotina ON/OFF de cada LED
    uint32_t tin_D1=0, tin_D2=0, tin_D3=0, tin_D4=0, tin_PA1=0, cont_led = 1;
 800016e:	2300      	movs	r3, #0
 8000170:	637b      	str	r3, [r7, #52]	; 0x34
 8000172:	2300      	movs	r3, #0
 8000174:	633b      	str	r3, [r7, #48]	; 0x30
 8000176:	2300      	movs	r3, #0
 8000178:	62fb      	str	r3, [r7, #44]	; 0x2c
 800017a:	2300      	movs	r3, #0
 800017c:	62bb      	str	r3, [r7, #40]	; 0x28
 800017e:	2300      	movs	r3, #0
 8000180:	627b      	str	r3, [r7, #36]	; 0x24
 8000182:	2301      	movs	r3, #1
 8000184:	623b      	str	r3, [r7, #32]
    uint32_t dt_D1=0, dt_D2=0, dt_D3=0, dt_D4=0, dt_PA1=PR; // proximos dt p/ cada LED
 8000186:	2300      	movs	r3, #0
 8000188:	61fb      	str	r3, [r7, #28]
 800018a:	2300      	movs	r3, #0
 800018c:	61bb      	str	r3, [r7, #24]
 800018e:	2300      	movs	r3, #0
 8000190:	617b      	str	r3, [r7, #20]
 8000192:	2300      	movs	r3, #0
 8000194:	613b      	str	r3, [r7, #16]
 8000196:	2350      	movs	r3, #80	; 0x50
 8000198:	60fb      	str	r3, [r7, #12]
    int modo = get_modo_oper();          // inicia modo como 0
 800019a:	f000 fb49 	bl	8000830 <get_modo_oper>
 800019e:	60b8      	str	r0, [r7, #8]

	// estrutura de dados para programar pedido de interrupção por software
  EXTI_HandleTypeDef hexti_1 = {};
 80001a0:	463b      	mov	r3, r7
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
 80001a6:	605a      	str	r2, [r3, #4]
  hexti_1.Line = EXTI_LINE_1;
 80001a8:	4b9b      	ldr	r3, [pc, #620]	; (8000418 <main+0x2cc>)
 80001aa:	603b      	str	r3, [r7, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

// tarefa #0 (executa sempre): ajustar tempos de piscar dos LEDs
	modo = get_modo_oper();
 80001ac:	f000 fb40 	bl	8000830 <get_modo_oper>
 80001b0:	60b8      	str	r0, [r7, #8]
 80001b2:	68bb      	ldr	r3, [r7, #8]
 80001b4:	2b03      	cmp	r3, #3
 80001b6:	d828      	bhi.n	800020a <main+0xbe>
 80001b8:	a201      	add	r2, pc, #4	; (adr r2, 80001c0 <main+0x74>)
 80001ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001be:	bf00      	nop
 80001c0:	080001d1 	.word	0x080001d1
 80001c4:	080001d9 	.word	0x080001d9
 80001c8:	080001df 	.word	0x080001df
 80001cc:	080001f5 	.word	0x080001f5
	switch(modo)
	{
	  case 0:   // mo modo '0' ajusta dt_xx dos LEDs
		modo_padrao = 1;
 80001d0:	4b92      	ldr	r3, [pc, #584]	; (800041c <main+0x2d0>)
 80001d2:	2201      	movs	r2, #1
 80001d4:	601a      	str	r2, [r3, #0]
		break;
 80001d6:	e018      	b.n	800020a <main+0xbe>
	  case 1:   // mo modo '1' reajusta dt_xx dos LEDs
		modo_padrao = 1;
 80001d8:	4b90      	ldr	r3, [pc, #576]	; (800041c <main+0x2d0>)
 80001da:	2201      	movs	r2, #1
 80001dc:	601a      	str	r2, [r3, #0]
	  case 2:   // mo modo '2' reajusta dt_xx dos LEDs
		dt_D1 = PM;                   // modo 2 - dt_D1
 80001de:	23f0      	movs	r3, #240	; 0xf0
 80001e0:	61fb      	str	r3, [r7, #28]
		dt_D2 = PR;                   // modo 2 - dt_D2
 80001e2:	2350      	movs	r3, #80	; 0x50
 80001e4:	61bb      	str	r3, [r7, #24]
		dt_D3 = PS;                   // modo 2 - dt_D3
 80001e6:	f44f 7334 	mov.w	r3, #720	; 0x2d0
 80001ea:	617b      	str	r3, [r7, #20]
		dt_D4 = PL;                   // modo 2 - dt_D4
 80001ec:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80001f0:	613b      	str	r3, [r7, #16]
		break;
 80001f2:	e00a      	b.n	800020a <main+0xbe>
	  case 3:   // mo modo '3' reajusta dt_xx dos LEDs
		dt_D1 = PR;                   // modo 3 - dt_D1
 80001f4:	2350      	movs	r3, #80	; 0x50
 80001f6:	61fb      	str	r3, [r7, #28]
		dt_D2 = PS;                   // modo 3 - dt_D2
 80001f8:	f44f 7334 	mov.w	r3, #720	; 0x2d0
 80001fc:	61bb      	str	r3, [r7, #24]
		dt_D3 = PL;                   // modo 3 - dt_D3
 80001fe:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000202:	617b      	str	r3, [r7, #20]
		dt_D4 = PM;                   // modo 3 - dt_D4
 8000204:	23f0      	movs	r3, #240	; 0xf0
 8000206:	613b      	str	r3, [r7, #16]
		break;
 8000208:	bf00      	nop
	}
		if(modo_padrao = 1){
 800020a:	4b84      	ldr	r3, [pc, #528]	; (800041c <main+0x2d0>)
 800020c:	2201      	movs	r2, #1
 800020e:	601a      	str	r2, [r3, #0]
				// tarefa #1 : controlar o estado do LED D1
					switch (sttD1)
 8000210:	4b83      	ldr	r3, [pc, #524]	; (8000420 <main+0x2d4>)
 8000212:	781b      	ldrb	r3, [r3, #0]
 8000214:	2b02      	cmp	r3, #2
 8000216:	d02b      	beq.n	8000270 <main+0x124>
 8000218:	2b02      	cmp	r3, #2
 800021a:	dc47      	bgt.n	80002ac <main+0x160>
 800021c:	2b00      	cmp	r3, #0
 800021e:	d002      	beq.n	8000226 <main+0xda>
 8000220:	2b01      	cmp	r3, #1
 8000222:	d00d      	beq.n	8000240 <main+0xf4>
 8000224:	e042      	b.n	80002ac <main+0x160>
							{
					if(cont_led > 4) cont_led = 1;
						if(cont_led == 1){
								  case INI_D1:                     // vai iniciar a máquina de estado
									tin_D1 = HAL_GetTick();        // tempo inicial que iniciou a tarefa
 8000226:	f000 fb9d 	bl	8000964 <HAL_GetTick>
 800022a:	6378      	str	r0, [r7, #52]	; 0x34
									sttD1 = LIG_D1;                // prox estado da máquina
 800022c:	4b7c      	ldr	r3, [pc, #496]	; (8000420 <main+0x2d4>)
 800022e:	2201      	movs	r2, #1
 8000230:	701a      	strb	r2, [r3, #0]
									HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET); // desliga o LED
 8000232:	2201      	movs	r2, #1
 8000234:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000238:	487a      	ldr	r0, [pc, #488]	; (8000424 <main+0x2d8>)
 800023a:	f000 fe5c 	bl	8000ef6 <HAL_GPIO_WritePin>
									break;
 800023e:	e035      	b.n	80002ac <main+0x160>
								  case LIG_D1:          // estado para ligar o LED
									if((HAL_GetTick()-tin_D1)>dt_D1) // se HAL_GetTick()-tin_D1 > dt_D1
 8000240:	f000 fb90 	bl	8000964 <HAL_GetTick>
 8000244:	4602      	mov	r2, r0
 8000246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000248:	1ad3      	subs	r3, r2, r3
 800024a:	69fa      	ldr	r2, [r7, #28]
 800024c:	429a      	cmp	r2, r3
 800024e:	d22a      	bcs.n	80002a6 <main+0x15a>
									{
									  tin_D1 = HAL_GetTick();	   // guarda tempo p/ prox mudança estado
 8000250:	f000 fb88 	bl	8000964 <HAL_GetTick>
 8000254:	6378      	str	r0, [r7, #52]	; 0x34
									  sttD1 = DSLG_D1;             // muda o prox estado da máquina
 8000256:	4b72      	ldr	r3, [pc, #456]	; (8000420 <main+0x2d4>)
 8000258:	2202      	movs	r2, #2
 800025a:	701a      	strb	r2, [r3, #0]
									  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET); // liga o LED
 800025c:	2200      	movs	r2, #0
 800025e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000262:	4870      	ldr	r0, [pc, #448]	; (8000424 <main+0x2d8>)
 8000264:	f000 fe47 	bl	8000ef6 <HAL_GPIO_WritePin>
									  lb15 = 0;
 8000268:	4b6f      	ldr	r3, [pc, #444]	; (8000428 <main+0x2dc>)
 800026a:	2200      	movs	r2, #0
 800026c:	601a      	str	r2, [r3, #0]
									}
									break;
 800026e:	e01a      	b.n	80002a6 <main+0x15a>
								  case DSLG_D1:                    // estado para desligar o LED
									if((HAL_GetTick()-tin_D1)>dt_D1) // se HAL_GetTick()-tin_D1 > dt_D1
 8000270:	f000 fb78 	bl	8000964 <HAL_GetTick>
 8000274:	4602      	mov	r2, r0
 8000276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000278:	1ad3      	subs	r3, r2, r3
 800027a:	69fa      	ldr	r2, [r7, #28]
 800027c:	429a      	cmp	r2, r3
 800027e:	d214      	bcs.n	80002aa <main+0x15e>
									{
									  tin_D1 = HAL_GetTick();	   // guarda tempo p/ prox mudança estado
 8000280:	f000 fb70 	bl	8000964 <HAL_GetTick>
 8000284:	6378      	str	r0, [r7, #52]	; 0x34
									  sttD1 = LIG_D1;              // muda o prox estado da máquina
 8000286:	4b66      	ldr	r3, [pc, #408]	; (8000420 <main+0x2d4>)
 8000288:	2201      	movs	r2, #1
 800028a:	701a      	strb	r2, [r3, #0]
									  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET); // desliga o LED
 800028c:	2201      	movs	r2, #1
 800028e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000292:	4864      	ldr	r0, [pc, #400]	; (8000424 <main+0x2d8>)
 8000294:	f000 fe2f 	bl	8000ef6 <HAL_GPIO_WritePin>
									  lb15 = 1;
 8000298:	4b63      	ldr	r3, [pc, #396]	; (8000428 <main+0x2dc>)
 800029a:	2201      	movs	r2, #1
 800029c:	601a      	str	r2, [r3, #0]
									  cont_led++;
 800029e:	6a3b      	ldr	r3, [r7, #32]
 80002a0:	3301      	adds	r3, #1
 80002a2:	623b      	str	r3, [r7, #32]
									}
									break;
 80002a4:	e001      	b.n	80002aa <main+0x15e>
									break;
 80002a6:	bf00      	nop
 80002a8:	e000      	b.n	80002ac <main+0x160>
									break;
 80002aa:	bf00      	nop
								};
								}

					// tarefa #2 : controlar o estado do LED D2
						switch (sttD2)
 80002ac:	4b5f      	ldr	r3, [pc, #380]	; (800042c <main+0x2e0>)
 80002ae:	781b      	ldrb	r3, [r3, #0]
 80002b0:	2b02      	cmp	r3, #2
 80002b2:	d02b      	beq.n	800030c <main+0x1c0>
 80002b4:	2b02      	cmp	r3, #2
 80002b6:	dc47      	bgt.n	8000348 <main+0x1fc>
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d002      	beq.n	80002c2 <main+0x176>
 80002bc:	2b01      	cmp	r3, #1
 80002be:	d00d      	beq.n	80002dc <main+0x190>
 80002c0:	e042      	b.n	8000348 <main+0x1fc>
								{
							if(cont_led ==2){
								  case INI_D2:                     // vai iniciar a máquina de estado
									tin_D2 = HAL_GetTick();        // tempo inicial que iniciou a tarefa
 80002c2:	f000 fb4f 	bl	8000964 <HAL_GetTick>
 80002c6:	6338      	str	r0, [r7, #48]	; 0x30
									sttD2 = LIG_D2;                // prox estado da máquina
 80002c8:	4b58      	ldr	r3, [pc, #352]	; (800042c <main+0x2e0>)
 80002ca:	2201      	movs	r2, #1
 80002cc:	701a      	strb	r2, [r3, #0]
									HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET); // desliga o LED
 80002ce:	2201      	movs	r2, #1
 80002d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80002d4:	4853      	ldr	r0, [pc, #332]	; (8000424 <main+0x2d8>)
 80002d6:	f000 fe0e 	bl	8000ef6 <HAL_GPIO_WritePin>
									break;
 80002da:	e035      	b.n	8000348 <main+0x1fc>
								  case LIG_D2:          // estado para ligar o LED
									if((HAL_GetTick()-tin_D2)>dt_D2) // se HAL_GetTick()-tin_D2 > dt_D2
 80002dc:	f000 fb42 	bl	8000964 <HAL_GetTick>
 80002e0:	4602      	mov	r2, r0
 80002e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80002e4:	1ad3      	subs	r3, r2, r3
 80002e6:	69ba      	ldr	r2, [r7, #24]
 80002e8:	429a      	cmp	r2, r3
 80002ea:	d22a      	bcs.n	8000342 <main+0x1f6>
									{
									  tin_D2 = HAL_GetTick();	   // guarda tempo p/ prox mudança estado
 80002ec:	f000 fb3a 	bl	8000964 <HAL_GetTick>
 80002f0:	6338      	str	r0, [r7, #48]	; 0x30
									  sttD2 = DSLG_D2;             // muda o prox estado da máquina
 80002f2:	4b4e      	ldr	r3, [pc, #312]	; (800042c <main+0x2e0>)
 80002f4:	2202      	movs	r2, #2
 80002f6:	701a      	strb	r2, [r3, #0]
									  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // liga o LED
 80002f8:	2200      	movs	r2, #0
 80002fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80002fe:	4849      	ldr	r0, [pc, #292]	; (8000424 <main+0x2d8>)
 8000300:	f000 fdf9 	bl	8000ef6 <HAL_GPIO_WritePin>
									  lb14 = 0;
 8000304:	4b4a      	ldr	r3, [pc, #296]	; (8000430 <main+0x2e4>)
 8000306:	2200      	movs	r2, #0
 8000308:	601a      	str	r2, [r3, #0]
									}
									break;
 800030a:	e01a      	b.n	8000342 <main+0x1f6>
								  case DSLG_D2:                    // estado para desligar o LED
									if((HAL_GetTick()-tin_D2)>dt_D2) // se HAL_GetTick()-tin_D2 > dt_D2
 800030c:	f000 fb2a 	bl	8000964 <HAL_GetTick>
 8000310:	4602      	mov	r2, r0
 8000312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000314:	1ad3      	subs	r3, r2, r3
 8000316:	69ba      	ldr	r2, [r7, #24]
 8000318:	429a      	cmp	r2, r3
 800031a:	d214      	bcs.n	8000346 <main+0x1fa>
									{
									  tin_D2 = HAL_GetTick();	   // guarda tempo p/ prox mudança estado
 800031c:	f000 fb22 	bl	8000964 <HAL_GetTick>
 8000320:	6338      	str	r0, [r7, #48]	; 0x30
									  sttD2 = LIG_D2;              // muda o prox estado da máquina
 8000322:	4b42      	ldr	r3, [pc, #264]	; (800042c <main+0x2e0>)
 8000324:	2201      	movs	r2, #1
 8000326:	701a      	strb	r2, [r3, #0]
									  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET); // desliga o LED
 8000328:	2201      	movs	r2, #1
 800032a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800032e:	483d      	ldr	r0, [pc, #244]	; (8000424 <main+0x2d8>)
 8000330:	f000 fde1 	bl	8000ef6 <HAL_GPIO_WritePin>
									  lb14 = 1;
 8000334:	4b3e      	ldr	r3, [pc, #248]	; (8000430 <main+0x2e4>)
 8000336:	2201      	movs	r2, #1
 8000338:	601a      	str	r2, [r3, #0]
									  cont_led++;
 800033a:	6a3b      	ldr	r3, [r7, #32]
 800033c:	3301      	adds	r3, #1
 800033e:	623b      	str	r3, [r7, #32]
									}
									break;
 8000340:	e001      	b.n	8000346 <main+0x1fa>
									break;
 8000342:	bf00      	nop
 8000344:	e000      	b.n	8000348 <main+0x1fc>
									break;
 8000346:	bf00      	nop
								};
								}

					// tarefa #3 : controlar o estado do LED D3
						switch (sttD3)
 8000348:	4b3a      	ldr	r3, [pc, #232]	; (8000434 <main+0x2e8>)
 800034a:	781b      	ldrb	r3, [r3, #0]
 800034c:	2b02      	cmp	r3, #2
 800034e:	d02b      	beq.n	80003a8 <main+0x25c>
 8000350:	2b02      	cmp	r3, #2
 8000352:	dc47      	bgt.n	80003e4 <main+0x298>
 8000354:	2b00      	cmp	r3, #0
 8000356:	d002      	beq.n	800035e <main+0x212>
 8000358:	2b01      	cmp	r3, #1
 800035a:	d00d      	beq.n	8000378 <main+0x22c>
 800035c:	e042      	b.n	80003e4 <main+0x298>
						if(cont_led ==3){
								{
								  case INI_D3:                     // vai iniciar a máquina de estado
									tin_D3 = HAL_GetTick();        // tempo inicial que iniciou a tarefa
 800035e:	f000 fb01 	bl	8000964 <HAL_GetTick>
 8000362:	62f8      	str	r0, [r7, #44]	; 0x2c
									sttD3 = LIG_D3;                // prox estado da máquina
 8000364:	4b33      	ldr	r3, [pc, #204]	; (8000434 <main+0x2e8>)
 8000366:	2201      	movs	r2, #1
 8000368:	701a      	strb	r2, [r3, #0]
									HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET); // desliga o LED
 800036a:	2201      	movs	r2, #1
 800036c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000370:	482c      	ldr	r0, [pc, #176]	; (8000424 <main+0x2d8>)
 8000372:	f000 fdc0 	bl	8000ef6 <HAL_GPIO_WritePin>
									break;
 8000376:	e035      	b.n	80003e4 <main+0x298>
								  case LIG_D3:          // estado para ligar o LED
									if((HAL_GetTick()-tin_D3)>dt_D3) // se HAL_GetTick()-tin_D3 > dt_D3
 8000378:	f000 faf4 	bl	8000964 <HAL_GetTick>
 800037c:	4602      	mov	r2, r0
 800037e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000380:	1ad3      	subs	r3, r2, r3
 8000382:	697a      	ldr	r2, [r7, #20]
 8000384:	429a      	cmp	r2, r3
 8000386:	d22a      	bcs.n	80003de <main+0x292>
									{
									  tin_D3 = HAL_GetTick();	   // guarda tempo p/ prox mudança estado
 8000388:	f000 faec 	bl	8000964 <HAL_GetTick>
 800038c:	62f8      	str	r0, [r7, #44]	; 0x2c
									  sttD3 = DSLG_D3;             // muda o prox estado da máquina
 800038e:	4b29      	ldr	r3, [pc, #164]	; (8000434 <main+0x2e8>)
 8000390:	2202      	movs	r2, #2
 8000392:	701a      	strb	r2, [r3, #0]
									  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET); // liga o LED
 8000394:	2200      	movs	r2, #0
 8000396:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800039a:	4822      	ldr	r0, [pc, #136]	; (8000424 <main+0x2d8>)
 800039c:	f000 fdab 	bl	8000ef6 <HAL_GPIO_WritePin>
									  lb13 = 0;
 80003a0:	4b25      	ldr	r3, [pc, #148]	; (8000438 <main+0x2ec>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	601a      	str	r2, [r3, #0]
									}
									break;
 80003a6:	e01a      	b.n	80003de <main+0x292>
								  case DSLG_D3:                    // estado para desligar o LED
									if((HAL_GetTick()-tin_D3)>dt_D3) // se HAL_GetTick()-tin_D3 > dt_D3
 80003a8:	f000 fadc 	bl	8000964 <HAL_GetTick>
 80003ac:	4602      	mov	r2, r0
 80003ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80003b0:	1ad3      	subs	r3, r2, r3
 80003b2:	697a      	ldr	r2, [r7, #20]
 80003b4:	429a      	cmp	r2, r3
 80003b6:	d214      	bcs.n	80003e2 <main+0x296>
									{
									  tin_D3 = HAL_GetTick();	   // guarda tempo p/ prox mudança estado
 80003b8:	f000 fad4 	bl	8000964 <HAL_GetTick>
 80003bc:	62f8      	str	r0, [r7, #44]	; 0x2c
									  sttD3 = LIG_D3;              // muda o prox estado da máquina
 80003be:	4b1d      	ldr	r3, [pc, #116]	; (8000434 <main+0x2e8>)
 80003c0:	2201      	movs	r2, #1
 80003c2:	701a      	strb	r2, [r3, #0]
									  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET); // desliga o LED
 80003c4:	2201      	movs	r2, #1
 80003c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003ca:	4816      	ldr	r0, [pc, #88]	; (8000424 <main+0x2d8>)
 80003cc:	f000 fd93 	bl	8000ef6 <HAL_GPIO_WritePin>
									  lb13 = 1;
 80003d0:	4b19      	ldr	r3, [pc, #100]	; (8000438 <main+0x2ec>)
 80003d2:	2201      	movs	r2, #1
 80003d4:	601a      	str	r2, [r3, #0]
									  cont_led++;
 80003d6:	6a3b      	ldr	r3, [r7, #32]
 80003d8:	3301      	adds	r3, #1
 80003da:	623b      	str	r3, [r7, #32]
									}
									break;
 80003dc:	e001      	b.n	80003e2 <main+0x296>
									break;
 80003de:	bf00      	nop
 80003e0:	e000      	b.n	80003e4 <main+0x298>
									break;
 80003e2:	bf00      	nop
								};
					}

				// tarefa #4 : controlar o estado do LED D4
					switch (sttD4)
 80003e4:	4b15      	ldr	r3, [pc, #84]	; (800043c <main+0x2f0>)
 80003e6:	781b      	ldrb	r3, [r3, #0]
 80003e8:	2b02      	cmp	r3, #2
 80003ea:	d041      	beq.n	8000470 <main+0x324>
 80003ec:	2b02      	cmp	r3, #2
 80003ee:	dc5d      	bgt.n	80004ac <main+0x360>
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d002      	beq.n	80003fa <main+0x2ae>
 80003f4:	2b01      	cmp	r3, #1
 80003f6:	d023      	beq.n	8000440 <main+0x2f4>
 80003f8:	e058      	b.n	80004ac <main+0x360>
					{
					if(cont_led ==4){

							  case INI_D4:                     // vai iniciar a máquina de estado
								tin_D4 = HAL_GetTick();        // tempo inicial que iniciou a tarefa
 80003fa:	f000 fab3 	bl	8000964 <HAL_GetTick>
 80003fe:	62b8      	str	r0, [r7, #40]	; 0x28
								sttD4 = LIG_D4;                // prox estado da máquina
 8000400:	4b0e      	ldr	r3, [pc, #56]	; (800043c <main+0x2f0>)
 8000402:	2201      	movs	r2, #1
 8000404:	701a      	strb	r2, [r3, #0]
								HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET); // desliga o LED
 8000406:	2201      	movs	r2, #1
 8000408:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800040c:	4805      	ldr	r0, [pc, #20]	; (8000424 <main+0x2d8>)
 800040e:	f000 fd72 	bl	8000ef6 <HAL_GPIO_WritePin>
								break;
 8000412:	e04b      	b.n	80004ac <main+0x360>
 8000414:	40011000 	.word	0x40011000
 8000418:	06000001 	.word	0x06000001
 800041c:	20000000 	.word	0x20000000
 8000420:	20000030 	.word	0x20000030
 8000424:	40010c00 	.word	0x40010c00
 8000428:	20000048 	.word	0x20000048
 800042c:	20000031 	.word	0x20000031
 8000430:	20000040 	.word	0x20000040
 8000434:	20000032 	.word	0x20000032
 8000438:	20000044 	.word	0x20000044
 800043c:	20000033 	.word	0x20000033
							  case LIG_D4:          // estado para ligar o LED
								if((HAL_GetTick()-tin_D4)>dt_D4) // se HAL_GetTick()-tin_D4 > dt_D4
 8000440:	f000 fa90 	bl	8000964 <HAL_GetTick>
 8000444:	4602      	mov	r2, r0
 8000446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000448:	1ad3      	subs	r3, r2, r3
 800044a:	693a      	ldr	r2, [r7, #16]
 800044c:	429a      	cmp	r2, r3
 800044e:	d22a      	bcs.n	80004a6 <main+0x35a>
								{
								  tin_D4 = HAL_GetTick();	   // guarda tempo p/ prox mudança estado
 8000450:	f000 fa88 	bl	8000964 <HAL_GetTick>
 8000454:	62b8      	str	r0, [r7, #40]	; 0x28
								  sttD4 = DSLG_D4;             // muda o prox estado da máquina
 8000456:	4b3a      	ldr	r3, [pc, #232]	; (8000540 <main+0x3f4>)
 8000458:	2202      	movs	r2, #2
 800045a:	701a      	strb	r2, [r3, #0]
								  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET); // liga o LED
 800045c:	2200      	movs	r2, #0
 800045e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000462:	4838      	ldr	r0, [pc, #224]	; (8000544 <main+0x3f8>)
 8000464:	f000 fd47 	bl	8000ef6 <HAL_GPIO_WritePin>
								  lb12 = 0;
 8000468:	4b37      	ldr	r3, [pc, #220]	; (8000548 <main+0x3fc>)
 800046a:	2200      	movs	r2, #0
 800046c:	601a      	str	r2, [r3, #0]
								}
								break;
 800046e:	e01a      	b.n	80004a6 <main+0x35a>
							  case DSLG_D4:                    // estado para desligar o LED
								if((HAL_GetTick()-tin_D4)>dt_D4) // se HAL_GetTick()-tin_D4 > dt_D4
 8000470:	f000 fa78 	bl	8000964 <HAL_GetTick>
 8000474:	4602      	mov	r2, r0
 8000476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000478:	1ad3      	subs	r3, r2, r3
 800047a:	693a      	ldr	r2, [r7, #16]
 800047c:	429a      	cmp	r2, r3
 800047e:	d214      	bcs.n	80004aa <main+0x35e>
								{
								  tin_D4 = HAL_GetTick();	   // guarda tempo p/ prox mudança estado
 8000480:	f000 fa70 	bl	8000964 <HAL_GetTick>
 8000484:	62b8      	str	r0, [r7, #40]	; 0x28
								  sttD4 = LIG_D4;              // muda o prox estado da máquina
 8000486:	4b2e      	ldr	r3, [pc, #184]	; (8000540 <main+0x3f4>)
 8000488:	2201      	movs	r2, #1
 800048a:	701a      	strb	r2, [r3, #0]
								  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET); // desliga o LED
 800048c:	2201      	movs	r2, #1
 800048e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000492:	482c      	ldr	r0, [pc, #176]	; (8000544 <main+0x3f8>)
 8000494:	f000 fd2f 	bl	8000ef6 <HAL_GPIO_WritePin>
								  lb12 = 1;
 8000498:	4b2b      	ldr	r3, [pc, #172]	; (8000548 <main+0x3fc>)
 800049a:	2201      	movs	r2, #1
 800049c:	601a      	str	r2, [r3, #0]
								  cont_led++;
 800049e:	6a3b      	ldr	r3, [r7, #32]
 80004a0:	3301      	adds	r3, #1
 80004a2:	623b      	str	r3, [r7, #32]
								}
								break;
 80004a4:	e001      	b.n	80004aa <main+0x35e>
								break;
 80004a6:	bf00      	nop
 80004a8:	e000      	b.n	80004ac <main+0x360>
								break;
 80004aa:	bf00      	nop
		}

// tarefa #5 - com interrupção gerada por software
#if CMP_MODO==0                        // DIRETIVA PARA O COMPILADOR !!!
		 // --- tarefa #5A - XMODO = 0   (com interrupção gerada por software)
		  switch (sttPA1)
 80004ac:	4b27      	ldr	r3, [pc, #156]	; (800054c <main+0x400>)
 80004ae:	781b      	ldrb	r3, [r3, #0]
 80004b0:	2b02      	cmp	r3, #2
 80004b2:	d02b      	beq.n	800050c <main+0x3c0>
 80004b4:	2b02      	cmp	r3, #2
 80004b6:	f73f ae79 	bgt.w	80001ac <main+0x60>
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d002      	beq.n	80004c4 <main+0x378>
 80004be:	2b01      	cmp	r3, #1
 80004c0:	d004      	beq.n	80004cc <main+0x380>
 80004c2:	e03b      	b.n	800053c <main+0x3f0>
		  {
		  case INI_PA1:                    // vai iniciar a máquina de estado
		    sttPA1 = LIG_PA1;              // prox estado da máquina
 80004c4:	4b21      	ldr	r3, [pc, #132]	; (800054c <main+0x400>)
 80004c6:	2201      	movs	r2, #1
 80004c8:	701a      	strb	r2, [r3, #0]
		    break;
 80004ca:	e037      	b.n	800053c <main+0x3f0>
		  case LIG_PA1:                    // estado p/ gerar INT_EXT_1
		    if((HAL_GetTick()-tin_PA1)>dt_PA1) // se HAL_GetTick()-tin_PA1 > dt_PA1
 80004cc:	f000 fa4a 	bl	8000964 <HAL_GetTick>
 80004d0:	4602      	mov	r2, r0
 80004d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004d4:	1ad3      	subs	r3, r2, r3
 80004d6:	68fa      	ldr	r2, [r7, #12]
 80004d8:	429a      	cmp	r2, r3
 80004da:	d22c      	bcs.n	8000536 <main+0x3ea>
		    {
		      tin_PA1 = HAL_GetTick();     // guarda tempo p/ prox mudança estado
 80004dc:	f000 fa42 	bl	8000964 <HAL_GetTick>
 80004e0:	6278      	str	r0, [r7, #36]	; 0x24
		      if (lpa1 == 1) {
 80004e2:	4b1b      	ldr	r3, [pc, #108]	; (8000550 <main+0x404>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	2b01      	cmp	r3, #1
 80004e8:	d125      	bne.n	8000536 <main+0x3ea>
		        sttPA1 = DSLG_PA1;             // muda o prox estado da máquina
 80004ea:	4b18      	ldr	r3, [pc, #96]	; (800054c <main+0x400>)
 80004ec:	2202      	movs	r2, #2
 80004ee:	701a      	strb	r2, [r3, #0]
		        //HAL_EXTI_ClearPending(&hexti_1, EXTI_TRIGGER_FALLING);
		        HAL_EXTI_GenerateSWI(&hexti_1);  // pedido de int por software
 80004f0:	463b      	mov	r3, r7
 80004f2:	4618      	mov	r0, r3
 80004f4:	f000 fb4e 	bl	8000b94 <HAL_EXTI_GenerateSWI>
		        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET); // ligar led
 80004f8:	2200      	movs	r2, #0
 80004fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004fe:	4815      	ldr	r0, [pc, #84]	; (8000554 <main+0x408>)
 8000500:	f000 fcf9 	bl	8000ef6 <HAL_GPIO_WritePin>
				lpa1=0;                    // volta lpa1 para desativada
 8000504:	4b12      	ldr	r3, [pc, #72]	; (8000550 <main+0x404>)
 8000506:	2200      	movs	r2, #0
 8000508:	601a      	str	r2, [r3, #0]
		      }
		    }
		    break;
 800050a:	e014      	b.n	8000536 <main+0x3ea>
		  case DSLG_PA1:                   // estado para desligar o LED
		    if((HAL_GetTick()-tin_PA1)>dt_PA1) // se HAL_GetTick()-tin_PA1 > dt_PA1
 800050c:	f000 fa2a 	bl	8000964 <HAL_GetTick>
 8000510:	4602      	mov	r2, r0
 8000512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000514:	1ad3      	subs	r3, r2, r3
 8000516:	68fa      	ldr	r2, [r7, #12]
 8000518:	429a      	cmp	r2, r3
 800051a:	d20e      	bcs.n	800053a <main+0x3ee>
		    {
			  tin_PA1 = HAL_GetTick();     // guarda tempo p/ prox mudança estado
 800051c:	f000 fa22 	bl	8000964 <HAL_GetTick>
 8000520:	6278      	str	r0, [r7, #36]	; 0x24
		      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET); // ligar led
 8000522:	2201      	movs	r2, #1
 8000524:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000528:	480a      	ldr	r0, [pc, #40]	; (8000554 <main+0x408>)
 800052a:	f000 fce4 	bl	8000ef6 <HAL_GPIO_WritePin>
		      sttPA1 = LIG_PA1;            // muda o prox estado da máquina
 800052e:	4b07      	ldr	r3, [pc, #28]	; (800054c <main+0x400>)
 8000530:	2201      	movs	r2, #1
 8000532:	701a      	strb	r2, [r3, #0]
		    }
		    break;
 8000534:	e001      	b.n	800053a <main+0x3ee>
		    break;
 8000536:	bf00      	nop
 8000538:	e638      	b.n	80001ac <main+0x60>
		    break;
 800053a:	bf00      	nop
	modo = get_modo_oper();
 800053c:	e636      	b.n	80001ac <main+0x60>
 800053e:	bf00      	nop
 8000540:	20000033 	.word	0x20000033
 8000544:	40010c00 	.word	0x40010c00
 8000548:	2000003c 	.word	0x2000003c
 800054c:	20000034 	.word	0x20000034
 8000550:	2000002c 	.word	0x2000002c
 8000554:	40011000 	.word	0x40011000

08000558 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b090      	sub	sp, #64	; 0x40
 800055c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055e:	f107 0318 	add.w	r3, r7, #24
 8000562:	2228      	movs	r2, #40	; 0x28
 8000564:	2100      	movs	r1, #0
 8000566:	4618      	mov	r0, r3
 8000568:	f001 f90c 	bl	8001784 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800056c:	1d3b      	adds	r3, r7, #4
 800056e:	2200      	movs	r2, #0
 8000570:	601a      	str	r2, [r3, #0]
 8000572:	605a      	str	r2, [r3, #4]
 8000574:	609a      	str	r2, [r3, #8]
 8000576:	60da      	str	r2, [r3, #12]
 8000578:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800057a:	2301      	movs	r3, #1
 800057c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800057e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000582:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000584:	2300      	movs	r3, #0
 8000586:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000588:	2301      	movs	r3, #1
 800058a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058c:	2302      	movs	r3, #2
 800058e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000590:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000594:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000596:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800059a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059c:	f107 0318 	add.w	r3, r7, #24
 80005a0:	4618      	mov	r0, r3
 80005a2:	f000 fce3 	bl	8000f6c <HAL_RCC_OscConfig>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80005ac:	f000 f8b4 	bl	8000718 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b0:	230f      	movs	r3, #15
 80005b2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b4:	2302      	movs	r3, #2
 80005b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c2:	2300      	movs	r3, #0
 80005c4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005c6:	1d3b      	adds	r3, r7, #4
 80005c8:	2102      	movs	r1, #2
 80005ca:	4618      	mov	r0, r3
 80005cc:	f000 ff4e 	bl	800146c <HAL_RCC_ClockConfig>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <SystemClock_Config+0x82>
  {
    Error_Handler();
 80005d6:	f000 f89f 	bl	8000718 <Error_Handler>
  }
}
 80005da:	bf00      	nop
 80005dc:	3740      	adds	r7, #64	; 0x40
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}

080005e2 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80005e2:	b580      	push	{r7, lr}
 80005e4:	af00      	add	r7, sp, #0
  /* EXTI2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80005e6:	2200      	movs	r2, #0
 80005e8:	2100      	movs	r1, #0
 80005ea:	2008      	movs	r0, #8
 80005ec:	f000 fa9b 	bl	8000b26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80005f0:	2008      	movs	r0, #8
 80005f2:	f000 fab4 	bl	8000b5e <HAL_NVIC_EnableIRQ>
  /* EXTI3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80005f6:	2200      	movs	r2, #0
 80005f8:	2100      	movs	r1, #0
 80005fa:	2009      	movs	r0, #9
 80005fc:	f000 fa93 	bl	8000b26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000600:	2009      	movs	r0, #9
 8000602:	f000 faac 	bl	8000b5e <HAL_NVIC_EnableIRQ>
  /* EXTI1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000606:	2200      	movs	r2, #0
 8000608:	2100      	movs	r1, #0
 800060a:	2007      	movs	r0, #7
 800060c:	f000 fa8b 	bl	8000b26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000610:	2007      	movs	r0, #7
 8000612:	f000 faa4 	bl	8000b5e <HAL_NVIC_EnableIRQ>
}
 8000616:	bf00      	nop
 8000618:	bd80      	pop	{r7, pc}
	...

0800061c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b088      	sub	sp, #32
 8000620:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000622:	f107 0310 	add.w	r3, r7, #16
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	605a      	str	r2, [r3, #4]
 800062c:	609a      	str	r2, [r3, #8]
 800062e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000630:	4b34      	ldr	r3, [pc, #208]	; (8000704 <MX_GPIO_Init+0xe8>)
 8000632:	699b      	ldr	r3, [r3, #24]
 8000634:	4a33      	ldr	r2, [pc, #204]	; (8000704 <MX_GPIO_Init+0xe8>)
 8000636:	f043 0310 	orr.w	r3, r3, #16
 800063a:	6193      	str	r3, [r2, #24]
 800063c:	4b31      	ldr	r3, [pc, #196]	; (8000704 <MX_GPIO_Init+0xe8>)
 800063e:	699b      	ldr	r3, [r3, #24]
 8000640:	f003 0310 	and.w	r3, r3, #16
 8000644:	60fb      	str	r3, [r7, #12]
 8000646:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000648:	4b2e      	ldr	r3, [pc, #184]	; (8000704 <MX_GPIO_Init+0xe8>)
 800064a:	699b      	ldr	r3, [r3, #24]
 800064c:	4a2d      	ldr	r2, [pc, #180]	; (8000704 <MX_GPIO_Init+0xe8>)
 800064e:	f043 0320 	orr.w	r3, r3, #32
 8000652:	6193      	str	r3, [r2, #24]
 8000654:	4b2b      	ldr	r3, [pc, #172]	; (8000704 <MX_GPIO_Init+0xe8>)
 8000656:	699b      	ldr	r3, [r3, #24]
 8000658:	f003 0320 	and.w	r3, r3, #32
 800065c:	60bb      	str	r3, [r7, #8]
 800065e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000660:	4b28      	ldr	r3, [pc, #160]	; (8000704 <MX_GPIO_Init+0xe8>)
 8000662:	699b      	ldr	r3, [r3, #24]
 8000664:	4a27      	ldr	r2, [pc, #156]	; (8000704 <MX_GPIO_Init+0xe8>)
 8000666:	f043 0304 	orr.w	r3, r3, #4
 800066a:	6193      	str	r3, [r2, #24]
 800066c:	4b25      	ldr	r3, [pc, #148]	; (8000704 <MX_GPIO_Init+0xe8>)
 800066e:	699b      	ldr	r3, [r3, #24]
 8000670:	f003 0304 	and.w	r3, r3, #4
 8000674:	607b      	str	r3, [r7, #4]
 8000676:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000678:	4b22      	ldr	r3, [pc, #136]	; (8000704 <MX_GPIO_Init+0xe8>)
 800067a:	699b      	ldr	r3, [r3, #24]
 800067c:	4a21      	ldr	r2, [pc, #132]	; (8000704 <MX_GPIO_Init+0xe8>)
 800067e:	f043 0308 	orr.w	r3, r3, #8
 8000682:	6193      	str	r3, [r2, #24]
 8000684:	4b1f      	ldr	r3, [pc, #124]	; (8000704 <MX_GPIO_Init+0xe8>)
 8000686:	699b      	ldr	r3, [r3, #24]
 8000688:	f003 0308 	and.w	r3, r3, #8
 800068c:	603b      	str	r3, [r7, #0]
 800068e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000690:	2200      	movs	r2, #0
 8000692:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000696:	481c      	ldr	r0, [pc, #112]	; (8000708 <MX_GPIO_Init+0xec>)
 8000698:	f000 fc2d 	bl	8000ef6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800069c:	2200      	movs	r2, #0
 800069e:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80006a2:	481a      	ldr	r0, [pc, #104]	; (800070c <MX_GPIO_Init+0xf0>)
 80006a4:	f000 fc27 	bl	8000ef6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80006a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ae:	2301      	movs	r3, #1
 80006b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b2:	2300      	movs	r3, #0
 80006b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b6:	2302      	movs	r3, #2
 80006b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006ba:	f107 0310 	add.w	r3, r7, #16
 80006be:	4619      	mov	r1, r3
 80006c0:	4811      	ldr	r0, [pc, #68]	; (8000708 <MX_GPIO_Init+0xec>)
 80006c2:	f000 fa7d 	bl	8000bc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80006c6:	230e      	movs	r3, #14
 80006c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006ca:	4b11      	ldr	r3, [pc, #68]	; (8000710 <MX_GPIO_Init+0xf4>)
 80006cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ce:	2300      	movs	r3, #0
 80006d0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d2:	f107 0310 	add.w	r3, r7, #16
 80006d6:	4619      	mov	r1, r3
 80006d8:	480e      	ldr	r0, [pc, #56]	; (8000714 <MX_GPIO_Init+0xf8>)
 80006da:	f000 fa71 	bl	8000bc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80006de:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80006e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e4:	2301      	movs	r3, #1
 80006e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e8:	2300      	movs	r3, #0
 80006ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ec:	2302      	movs	r3, #2
 80006ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006f0:	f107 0310 	add.w	r3, r7, #16
 80006f4:	4619      	mov	r1, r3
 80006f6:	4805      	ldr	r0, [pc, #20]	; (800070c <MX_GPIO_Init+0xf0>)
 80006f8:	f000 fa62 	bl	8000bc0 <HAL_GPIO_Init>

}
 80006fc:	bf00      	nop
 80006fe:	3720      	adds	r7, #32
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	40021000 	.word	0x40021000
 8000708:	40011000 	.word	0x40011000
 800070c:	40010c00 	.word	0x40010c00
 8000710:	10210000 	.word	0x10210000
 8000714:	40010800 	.word	0x40010800

08000718 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800071c:	b672      	cpsid	i
}
 800071e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000720:	e7fe      	b.n	8000720 <Error_Handler+0x8>
	...

08000724 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000724:	b480      	push	{r7}
 8000726:	b085      	sub	sp, #20
 8000728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800072a:	4b15      	ldr	r3, [pc, #84]	; (8000780 <HAL_MspInit+0x5c>)
 800072c:	699b      	ldr	r3, [r3, #24]
 800072e:	4a14      	ldr	r2, [pc, #80]	; (8000780 <HAL_MspInit+0x5c>)
 8000730:	f043 0301 	orr.w	r3, r3, #1
 8000734:	6193      	str	r3, [r2, #24]
 8000736:	4b12      	ldr	r3, [pc, #72]	; (8000780 <HAL_MspInit+0x5c>)
 8000738:	699b      	ldr	r3, [r3, #24]
 800073a:	f003 0301 	and.w	r3, r3, #1
 800073e:	60bb      	str	r3, [r7, #8]
 8000740:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000742:	4b0f      	ldr	r3, [pc, #60]	; (8000780 <HAL_MspInit+0x5c>)
 8000744:	69db      	ldr	r3, [r3, #28]
 8000746:	4a0e      	ldr	r2, [pc, #56]	; (8000780 <HAL_MspInit+0x5c>)
 8000748:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800074c:	61d3      	str	r3, [r2, #28]
 800074e:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <HAL_MspInit+0x5c>)
 8000750:	69db      	ldr	r3, [r3, #28]
 8000752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800075a:	4b0a      	ldr	r3, [pc, #40]	; (8000784 <HAL_MspInit+0x60>)
 800075c:	685b      	ldr	r3, [r3, #4]
 800075e:	60fb      	str	r3, [r7, #12]
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000766:	60fb      	str	r3, [r7, #12]
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	4a04      	ldr	r2, [pc, #16]	; (8000784 <HAL_MspInit+0x60>)
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000776:	bf00      	nop
 8000778:	3714      	adds	r7, #20
 800077a:	46bd      	mov	sp, r7
 800077c:	bc80      	pop	{r7}
 800077e:	4770      	bx	lr
 8000780:	40021000 	.word	0x40021000
 8000784:	40010000 	.word	0x40010000

08000788 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800078c:	e7fe      	b.n	800078c <NMI_Handler+0x4>

0800078e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800078e:	b480      	push	{r7}
 8000790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000792:	e7fe      	b.n	8000792 <HardFault_Handler+0x4>

08000794 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000798:	e7fe      	b.n	8000798 <MemManage_Handler+0x4>

0800079a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800079a:	b480      	push	{r7}
 800079c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800079e:	e7fe      	b.n	800079e <BusFault_Handler+0x4>

080007a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007a4:	e7fe      	b.n	80007a4 <UsageFault_Handler+0x4>

080007a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007a6:	b480      	push	{r7}
 80007a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007aa:	bf00      	nop
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bc80      	pop	{r7}
 80007b0:	4770      	bx	lr

080007b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007b2:	b480      	push	{r7}
 80007b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007b6:	bf00      	nop
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bc80      	pop	{r7}
 80007bc:	4770      	bx	lr

080007be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007be:	b480      	push	{r7}
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007c2:	bf00      	nop
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bc80      	pop	{r7}
 80007c8:	4770      	bx	lr

080007ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007ca:	b580      	push	{r7, lr}
 80007cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007ce:	f000 f8b7 	bl	8000940 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
	...

080007d8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */
	// se PA1=0 é porque o pino foi ativado para LOW
	  if (HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1)==0)
 80007dc:	2102      	movs	r1, #2
 80007de:	480b      	ldr	r0, [pc, #44]	; (800080c <EXTI1_IRQHandler+0x34>)
 80007e0:	f000 fb72 	bl	8000ec8 <HAL_GPIO_ReadPin>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d10b      	bne.n	8000802 <EXTI1_IRQHandler+0x2a>
	  {
	    ++ modo_oper;                             // incrementa modo operação
 80007ea:	4b09      	ldr	r3, [pc, #36]	; (8000810 <EXTI1_IRQHandler+0x38>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	3301      	adds	r3, #1
 80007f0:	4a07      	ldr	r2, [pc, #28]	; (8000810 <EXTI1_IRQHandler+0x38>)
 80007f2:	6013      	str	r3, [r2, #0]
	    if (modo_oper>MAX_MODO_OPER) modo_oper=0; // se >MAX voltar modo_oper=0
 80007f4:	4b06      	ldr	r3, [pc, #24]	; (8000810 <EXTI1_IRQHandler+0x38>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	2b01      	cmp	r3, #1
 80007fa:	d902      	bls.n	8000802 <EXTI1_IRQHandler+0x2a>
 80007fc:	4b04      	ldr	r3, [pc, #16]	; (8000810 <EXTI1_IRQHandler+0x38>)
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
	  }
  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000802:	2002      	movs	r0, #2
 8000804:	f000 fb90 	bl	8000f28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}
 800080c:	40010800 	.word	0x40010800
 8000810:	2000004c 	.word	0x2000004c

08000814 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000818:	2004      	movs	r0, #4
 800081a:	f000 fb85 	bl	8000f28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}

08000822 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000822:	b580      	push	{r7, lr}
 8000824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000826:	2008      	movs	r0, #8
 8000828:	f000 fb7e 	bl	8000f28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800082c:	bf00      	nop
 800082e:	bd80      	pop	{r7, pc}

08000830 <get_modo_oper>:

/* USER CODE BEGIN 1 */
// fn que qpenas retorna o valor da var modo_oper
int get_modo_oper(void){
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000834:	b672      	cpsid	i
}
 8000836:	bf00      	nop
  static int x;                        // var local recebe modo_oper
  // OBS: seção crítica, desabilitamos todas as IRQs p/ atualizar var
  __disable_irq();                     // desabilita IRQs
  x = modo_oper;                       // faz x = modo_oper
 8000838:	4b06      	ldr	r3, [pc, #24]	; (8000854 <get_modo_oper+0x24>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	461a      	mov	r2, r3
 800083e:	4b06      	ldr	r3, [pc, #24]	; (8000858 <get_modo_oper+0x28>)
 8000840:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000842:	b662      	cpsie	i
}
 8000844:	bf00      	nop
  __enable_irq();                      // volta habilitar IRQs
  return x;                            // retorna x (=modo_oper)
 8000846:	4b04      	ldr	r3, [pc, #16]	; (8000858 <get_modo_oper+0x28>)
 8000848:	681b      	ldr	r3, [r3, #0]
}
 800084a:	4618      	mov	r0, r3
 800084c:	46bd      	mov	sp, r7
 800084e:	bc80      	pop	{r7}
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	2000004c 	.word	0x2000004c
 8000858:	20000038 	.word	0x20000038

0800085c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000860:	bf00      	nop
 8000862:	46bd      	mov	sp, r7
 8000864:	bc80      	pop	{r7}
 8000866:	4770      	bx	lr

08000868 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000868:	480c      	ldr	r0, [pc, #48]	; (800089c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800086a:	490d      	ldr	r1, [pc, #52]	; (80008a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800086c:	4a0d      	ldr	r2, [pc, #52]	; (80008a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800086e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000870:	e002      	b.n	8000878 <LoopCopyDataInit>

08000872 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000872:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000874:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000876:	3304      	adds	r3, #4

08000878 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000878:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800087a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800087c:	d3f9      	bcc.n	8000872 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800087e:	4a0a      	ldr	r2, [pc, #40]	; (80008a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000880:	4c0a      	ldr	r4, [pc, #40]	; (80008ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8000882:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000884:	e001      	b.n	800088a <LoopFillZerobss>

08000886 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000886:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000888:	3204      	adds	r2, #4

0800088a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800088a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800088c:	d3fb      	bcc.n	8000886 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800088e:	f7ff ffe5 	bl	800085c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000892:	f000 ff53 	bl	800173c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000896:	f7ff fc59 	bl	800014c <main>
  bx lr
 800089a:	4770      	bx	lr
  ldr r0, =_sdata
 800089c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008a0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80008a4:	080017d4 	.word	0x080017d4
  ldr r2, =_sbss
 80008a8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80008ac:	20000054 	.word	0x20000054

080008b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008b0:	e7fe      	b.n	80008b0 <ADC1_2_IRQHandler>
	...

080008b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008b8:	4b08      	ldr	r3, [pc, #32]	; (80008dc <HAL_Init+0x28>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a07      	ldr	r2, [pc, #28]	; (80008dc <HAL_Init+0x28>)
 80008be:	f043 0310 	orr.w	r3, r3, #16
 80008c2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008c4:	2003      	movs	r0, #3
 80008c6:	f000 f923 	bl	8000b10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008ca:	200f      	movs	r0, #15
 80008cc:	f000 f808 	bl	80008e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008d0:	f7ff ff28 	bl	8000724 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008d4:	2300      	movs	r3, #0
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40022000 	.word	0x40022000

080008e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008e8:	4b12      	ldr	r3, [pc, #72]	; (8000934 <HAL_InitTick+0x54>)
 80008ea:	681a      	ldr	r2, [r3, #0]
 80008ec:	4b12      	ldr	r3, [pc, #72]	; (8000938 <HAL_InitTick+0x58>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	4619      	mov	r1, r3
 80008f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80008fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80008fe:	4618      	mov	r0, r3
 8000900:	f000 f93b 	bl	8000b7a <HAL_SYSTICK_Config>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800090a:	2301      	movs	r3, #1
 800090c:	e00e      	b.n	800092c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	2b0f      	cmp	r3, #15
 8000912:	d80a      	bhi.n	800092a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000914:	2200      	movs	r2, #0
 8000916:	6879      	ldr	r1, [r7, #4]
 8000918:	f04f 30ff 	mov.w	r0, #4294967295
 800091c:	f000 f903 	bl	8000b26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000920:	4a06      	ldr	r2, [pc, #24]	; (800093c <HAL_InitTick+0x5c>)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000926:	2300      	movs	r3, #0
 8000928:	e000      	b.n	800092c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800092a:	2301      	movs	r3, #1
}
 800092c:	4618      	mov	r0, r3
 800092e:	3708      	adds	r7, #8
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	20000004 	.word	0x20000004
 8000938:	2000000c 	.word	0x2000000c
 800093c:	20000008 	.word	0x20000008

08000940 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000944:	4b05      	ldr	r3, [pc, #20]	; (800095c <HAL_IncTick+0x1c>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	461a      	mov	r2, r3
 800094a:	4b05      	ldr	r3, [pc, #20]	; (8000960 <HAL_IncTick+0x20>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4413      	add	r3, r2
 8000950:	4a03      	ldr	r2, [pc, #12]	; (8000960 <HAL_IncTick+0x20>)
 8000952:	6013      	str	r3, [r2, #0]
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	bc80      	pop	{r7}
 800095a:	4770      	bx	lr
 800095c:	2000000c 	.word	0x2000000c
 8000960:	20000050 	.word	0x20000050

08000964 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  return uwTick;
 8000968:	4b02      	ldr	r3, [pc, #8]	; (8000974 <HAL_GetTick+0x10>)
 800096a:	681b      	ldr	r3, [r3, #0]
}
 800096c:	4618      	mov	r0, r3
 800096e:	46bd      	mov	sp, r7
 8000970:	bc80      	pop	{r7}
 8000972:	4770      	bx	lr
 8000974:	20000050 	.word	0x20000050

08000978 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000978:	b480      	push	{r7}
 800097a:	b085      	sub	sp, #20
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	f003 0307 	and.w	r3, r3, #7
 8000986:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000988:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <__NVIC_SetPriorityGrouping+0x44>)
 800098a:	68db      	ldr	r3, [r3, #12]
 800098c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800098e:	68ba      	ldr	r2, [r7, #8]
 8000990:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000994:	4013      	ands	r3, r2
 8000996:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800099c:	68bb      	ldr	r3, [r7, #8]
 800099e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009aa:	4a04      	ldr	r2, [pc, #16]	; (80009bc <__NVIC_SetPriorityGrouping+0x44>)
 80009ac:	68bb      	ldr	r3, [r7, #8]
 80009ae:	60d3      	str	r3, [r2, #12]
}
 80009b0:	bf00      	nop
 80009b2:	3714      	adds	r7, #20
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bc80      	pop	{r7}
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	e000ed00 	.word	0xe000ed00

080009c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009c4:	4b04      	ldr	r3, [pc, #16]	; (80009d8 <__NVIC_GetPriorityGrouping+0x18>)
 80009c6:	68db      	ldr	r3, [r3, #12]
 80009c8:	0a1b      	lsrs	r3, r3, #8
 80009ca:	f003 0307 	and.w	r3, r3, #7
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bc80      	pop	{r7}
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	e000ed00 	.word	0xe000ed00

080009dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	4603      	mov	r3, r0
 80009e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	db0b      	blt.n	8000a06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009ee:	79fb      	ldrb	r3, [r7, #7]
 80009f0:	f003 021f 	and.w	r2, r3, #31
 80009f4:	4906      	ldr	r1, [pc, #24]	; (8000a10 <__NVIC_EnableIRQ+0x34>)
 80009f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009fa:	095b      	lsrs	r3, r3, #5
 80009fc:	2001      	movs	r0, #1
 80009fe:	fa00 f202 	lsl.w	r2, r0, r2
 8000a02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a06:	bf00      	nop
 8000a08:	370c      	adds	r7, #12
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bc80      	pop	{r7}
 8000a0e:	4770      	bx	lr
 8000a10:	e000e100 	.word	0xe000e100

08000a14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	6039      	str	r1, [r7, #0]
 8000a1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	db0a      	blt.n	8000a3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	b2da      	uxtb	r2, r3
 8000a2c:	490c      	ldr	r1, [pc, #48]	; (8000a60 <__NVIC_SetPriority+0x4c>)
 8000a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a32:	0112      	lsls	r2, r2, #4
 8000a34:	b2d2      	uxtb	r2, r2
 8000a36:	440b      	add	r3, r1
 8000a38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a3c:	e00a      	b.n	8000a54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	b2da      	uxtb	r2, r3
 8000a42:	4908      	ldr	r1, [pc, #32]	; (8000a64 <__NVIC_SetPriority+0x50>)
 8000a44:	79fb      	ldrb	r3, [r7, #7]
 8000a46:	f003 030f 	and.w	r3, r3, #15
 8000a4a:	3b04      	subs	r3, #4
 8000a4c:	0112      	lsls	r2, r2, #4
 8000a4e:	b2d2      	uxtb	r2, r2
 8000a50:	440b      	add	r3, r1
 8000a52:	761a      	strb	r2, [r3, #24]
}
 8000a54:	bf00      	nop
 8000a56:	370c      	adds	r7, #12
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bc80      	pop	{r7}
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	e000e100 	.word	0xe000e100
 8000a64:	e000ed00 	.word	0xe000ed00

08000a68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b089      	sub	sp, #36	; 0x24
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	60f8      	str	r0, [r7, #12]
 8000a70:	60b9      	str	r1, [r7, #8]
 8000a72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	f003 0307 	and.w	r3, r3, #7
 8000a7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a7c:	69fb      	ldr	r3, [r7, #28]
 8000a7e:	f1c3 0307 	rsb	r3, r3, #7
 8000a82:	2b04      	cmp	r3, #4
 8000a84:	bf28      	it	cs
 8000a86:	2304      	movcs	r3, #4
 8000a88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a8a:	69fb      	ldr	r3, [r7, #28]
 8000a8c:	3304      	adds	r3, #4
 8000a8e:	2b06      	cmp	r3, #6
 8000a90:	d902      	bls.n	8000a98 <NVIC_EncodePriority+0x30>
 8000a92:	69fb      	ldr	r3, [r7, #28]
 8000a94:	3b03      	subs	r3, #3
 8000a96:	e000      	b.n	8000a9a <NVIC_EncodePriority+0x32>
 8000a98:	2300      	movs	r3, #0
 8000a9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000aa0:	69bb      	ldr	r3, [r7, #24]
 8000aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa6:	43da      	mvns	r2, r3
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	401a      	ands	r2, r3
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ab0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8000aba:	43d9      	mvns	r1, r3
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac0:	4313      	orrs	r3, r2
         );
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	3724      	adds	r7, #36	; 0x24
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bc80      	pop	{r7}
 8000aca:	4770      	bx	lr

08000acc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	3b01      	subs	r3, #1
 8000ad8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000adc:	d301      	bcc.n	8000ae2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ade:	2301      	movs	r3, #1
 8000ae0:	e00f      	b.n	8000b02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ae2:	4a0a      	ldr	r2, [pc, #40]	; (8000b0c <SysTick_Config+0x40>)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	3b01      	subs	r3, #1
 8000ae8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000aea:	210f      	movs	r1, #15
 8000aec:	f04f 30ff 	mov.w	r0, #4294967295
 8000af0:	f7ff ff90 	bl	8000a14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000af4:	4b05      	ldr	r3, [pc, #20]	; (8000b0c <SysTick_Config+0x40>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000afa:	4b04      	ldr	r3, [pc, #16]	; (8000b0c <SysTick_Config+0x40>)
 8000afc:	2207      	movs	r2, #7
 8000afe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b00:	2300      	movs	r3, #0
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	e000e010 	.word	0xe000e010

08000b10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b18:	6878      	ldr	r0, [r7, #4]
 8000b1a:	f7ff ff2d 	bl	8000978 <__NVIC_SetPriorityGrouping>
}
 8000b1e:	bf00      	nop
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}

08000b26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b26:	b580      	push	{r7, lr}
 8000b28:	b086      	sub	sp, #24
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	60b9      	str	r1, [r7, #8]
 8000b30:	607a      	str	r2, [r7, #4]
 8000b32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b34:	2300      	movs	r3, #0
 8000b36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b38:	f7ff ff42 	bl	80009c0 <__NVIC_GetPriorityGrouping>
 8000b3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b3e:	687a      	ldr	r2, [r7, #4]
 8000b40:	68b9      	ldr	r1, [r7, #8]
 8000b42:	6978      	ldr	r0, [r7, #20]
 8000b44:	f7ff ff90 	bl	8000a68 <NVIC_EncodePriority>
 8000b48:	4602      	mov	r2, r0
 8000b4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b4e:	4611      	mov	r1, r2
 8000b50:	4618      	mov	r0, r3
 8000b52:	f7ff ff5f 	bl	8000a14 <__NVIC_SetPriority>
}
 8000b56:	bf00      	nop
 8000b58:	3718      	adds	r7, #24
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	b082      	sub	sp, #8
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	4603      	mov	r3, r0
 8000b66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f7ff ff35 	bl	80009dc <__NVIC_EnableIRQ>
}
 8000b72:	bf00      	nop
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}

08000b7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	b082      	sub	sp, #8
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b82:	6878      	ldr	r0, [r7, #4]
 8000b84:	f7ff ffa2 	bl	8000acc <SysTick_Config>
 8000b88:	4603      	mov	r3, r0
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
	...

08000b94 <HAL_EXTI_GenerateSWI>:
  * @brief  Generate a software interrupt for a dedicated line.
  * @param  hexti Exti handle.
  * @retval None.
  */
void HAL_EXTI_GenerateSWI(EXTI_HandleTypeDef *hexti)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b085      	sub	sp, #20
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  /* Check parameters */
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	f003 031f 	and.w	r3, r3, #31
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8000baa:	60fb      	str	r3, [r7, #12]

  /* Generate Software interrupt */
  EXTI->SWIER = maskline;
 8000bac:	4a03      	ldr	r2, [pc, #12]	; (8000bbc <HAL_EXTI_GenerateSWI+0x28>)
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	6113      	str	r3, [r2, #16]
}
 8000bb2:	bf00      	nop
 8000bb4:	3714      	adds	r7, #20
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bc80      	pop	{r7}
 8000bba:	4770      	bx	lr
 8000bbc:	40010400 	.word	0x40010400

08000bc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b08b      	sub	sp, #44	; 0x2c
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bd2:	e169      	b.n	8000ea8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bdc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	69fa      	ldr	r2, [r7, #28]
 8000be4:	4013      	ands	r3, r2
 8000be6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000be8:	69ba      	ldr	r2, [r7, #24]
 8000bea:	69fb      	ldr	r3, [r7, #28]
 8000bec:	429a      	cmp	r2, r3
 8000bee:	f040 8158 	bne.w	8000ea2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	4a9a      	ldr	r2, [pc, #616]	; (8000e60 <HAL_GPIO_Init+0x2a0>)
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d05e      	beq.n	8000cba <HAL_GPIO_Init+0xfa>
 8000bfc:	4a98      	ldr	r2, [pc, #608]	; (8000e60 <HAL_GPIO_Init+0x2a0>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d875      	bhi.n	8000cee <HAL_GPIO_Init+0x12e>
 8000c02:	4a98      	ldr	r2, [pc, #608]	; (8000e64 <HAL_GPIO_Init+0x2a4>)
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d058      	beq.n	8000cba <HAL_GPIO_Init+0xfa>
 8000c08:	4a96      	ldr	r2, [pc, #600]	; (8000e64 <HAL_GPIO_Init+0x2a4>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d86f      	bhi.n	8000cee <HAL_GPIO_Init+0x12e>
 8000c0e:	4a96      	ldr	r2, [pc, #600]	; (8000e68 <HAL_GPIO_Init+0x2a8>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d052      	beq.n	8000cba <HAL_GPIO_Init+0xfa>
 8000c14:	4a94      	ldr	r2, [pc, #592]	; (8000e68 <HAL_GPIO_Init+0x2a8>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d869      	bhi.n	8000cee <HAL_GPIO_Init+0x12e>
 8000c1a:	4a94      	ldr	r2, [pc, #592]	; (8000e6c <HAL_GPIO_Init+0x2ac>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d04c      	beq.n	8000cba <HAL_GPIO_Init+0xfa>
 8000c20:	4a92      	ldr	r2, [pc, #584]	; (8000e6c <HAL_GPIO_Init+0x2ac>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d863      	bhi.n	8000cee <HAL_GPIO_Init+0x12e>
 8000c26:	4a92      	ldr	r2, [pc, #584]	; (8000e70 <HAL_GPIO_Init+0x2b0>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d046      	beq.n	8000cba <HAL_GPIO_Init+0xfa>
 8000c2c:	4a90      	ldr	r2, [pc, #576]	; (8000e70 <HAL_GPIO_Init+0x2b0>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d85d      	bhi.n	8000cee <HAL_GPIO_Init+0x12e>
 8000c32:	2b12      	cmp	r3, #18
 8000c34:	d82a      	bhi.n	8000c8c <HAL_GPIO_Init+0xcc>
 8000c36:	2b12      	cmp	r3, #18
 8000c38:	d859      	bhi.n	8000cee <HAL_GPIO_Init+0x12e>
 8000c3a:	a201      	add	r2, pc, #4	; (adr r2, 8000c40 <HAL_GPIO_Init+0x80>)
 8000c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c40:	08000cbb 	.word	0x08000cbb
 8000c44:	08000c95 	.word	0x08000c95
 8000c48:	08000ca7 	.word	0x08000ca7
 8000c4c:	08000ce9 	.word	0x08000ce9
 8000c50:	08000cef 	.word	0x08000cef
 8000c54:	08000cef 	.word	0x08000cef
 8000c58:	08000cef 	.word	0x08000cef
 8000c5c:	08000cef 	.word	0x08000cef
 8000c60:	08000cef 	.word	0x08000cef
 8000c64:	08000cef 	.word	0x08000cef
 8000c68:	08000cef 	.word	0x08000cef
 8000c6c:	08000cef 	.word	0x08000cef
 8000c70:	08000cef 	.word	0x08000cef
 8000c74:	08000cef 	.word	0x08000cef
 8000c78:	08000cef 	.word	0x08000cef
 8000c7c:	08000cef 	.word	0x08000cef
 8000c80:	08000cef 	.word	0x08000cef
 8000c84:	08000c9d 	.word	0x08000c9d
 8000c88:	08000cb1 	.word	0x08000cb1
 8000c8c:	4a79      	ldr	r2, [pc, #484]	; (8000e74 <HAL_GPIO_Init+0x2b4>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d013      	beq.n	8000cba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c92:	e02c      	b.n	8000cee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	623b      	str	r3, [r7, #32]
          break;
 8000c9a:	e029      	b.n	8000cf0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	68db      	ldr	r3, [r3, #12]
 8000ca0:	3304      	adds	r3, #4
 8000ca2:	623b      	str	r3, [r7, #32]
          break;
 8000ca4:	e024      	b.n	8000cf0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	68db      	ldr	r3, [r3, #12]
 8000caa:	3308      	adds	r3, #8
 8000cac:	623b      	str	r3, [r7, #32]
          break;
 8000cae:	e01f      	b.n	8000cf0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	68db      	ldr	r3, [r3, #12]
 8000cb4:	330c      	adds	r3, #12
 8000cb6:	623b      	str	r3, [r7, #32]
          break;
 8000cb8:	e01a      	b.n	8000cf0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	689b      	ldr	r3, [r3, #8]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d102      	bne.n	8000cc8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000cc2:	2304      	movs	r3, #4
 8000cc4:	623b      	str	r3, [r7, #32]
          break;
 8000cc6:	e013      	b.n	8000cf0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	689b      	ldr	r3, [r3, #8]
 8000ccc:	2b01      	cmp	r3, #1
 8000cce:	d105      	bne.n	8000cdc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cd0:	2308      	movs	r3, #8
 8000cd2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	69fa      	ldr	r2, [r7, #28]
 8000cd8:	611a      	str	r2, [r3, #16]
          break;
 8000cda:	e009      	b.n	8000cf0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cdc:	2308      	movs	r3, #8
 8000cde:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	69fa      	ldr	r2, [r7, #28]
 8000ce4:	615a      	str	r2, [r3, #20]
          break;
 8000ce6:	e003      	b.n	8000cf0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	623b      	str	r3, [r7, #32]
          break;
 8000cec:	e000      	b.n	8000cf0 <HAL_GPIO_Init+0x130>
          break;
 8000cee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000cf0:	69bb      	ldr	r3, [r7, #24]
 8000cf2:	2bff      	cmp	r3, #255	; 0xff
 8000cf4:	d801      	bhi.n	8000cfa <HAL_GPIO_Init+0x13a>
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	e001      	b.n	8000cfe <HAL_GPIO_Init+0x13e>
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	3304      	adds	r3, #4
 8000cfe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d00:	69bb      	ldr	r3, [r7, #24]
 8000d02:	2bff      	cmp	r3, #255	; 0xff
 8000d04:	d802      	bhi.n	8000d0c <HAL_GPIO_Init+0x14c>
 8000d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d08:	009b      	lsls	r3, r3, #2
 8000d0a:	e002      	b.n	8000d12 <HAL_GPIO_Init+0x152>
 8000d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d0e:	3b08      	subs	r3, #8
 8000d10:	009b      	lsls	r3, r3, #2
 8000d12:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	210f      	movs	r1, #15
 8000d1a:	693b      	ldr	r3, [r7, #16]
 8000d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d20:	43db      	mvns	r3, r3
 8000d22:	401a      	ands	r2, r3
 8000d24:	6a39      	ldr	r1, [r7, #32]
 8000d26:	693b      	ldr	r3, [r7, #16]
 8000d28:	fa01 f303 	lsl.w	r3, r1, r3
 8000d2c:	431a      	orrs	r2, r3
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	f000 80b1 	beq.w	8000ea2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d40:	4b4d      	ldr	r3, [pc, #308]	; (8000e78 <HAL_GPIO_Init+0x2b8>)
 8000d42:	699b      	ldr	r3, [r3, #24]
 8000d44:	4a4c      	ldr	r2, [pc, #304]	; (8000e78 <HAL_GPIO_Init+0x2b8>)
 8000d46:	f043 0301 	orr.w	r3, r3, #1
 8000d4a:	6193      	str	r3, [r2, #24]
 8000d4c:	4b4a      	ldr	r3, [pc, #296]	; (8000e78 <HAL_GPIO_Init+0x2b8>)
 8000d4e:	699b      	ldr	r3, [r3, #24]
 8000d50:	f003 0301 	and.w	r3, r3, #1
 8000d54:	60bb      	str	r3, [r7, #8]
 8000d56:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d58:	4a48      	ldr	r2, [pc, #288]	; (8000e7c <HAL_GPIO_Init+0x2bc>)
 8000d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d5c:	089b      	lsrs	r3, r3, #2
 8000d5e:	3302      	adds	r3, #2
 8000d60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d64:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d68:	f003 0303 	and.w	r3, r3, #3
 8000d6c:	009b      	lsls	r3, r3, #2
 8000d6e:	220f      	movs	r2, #15
 8000d70:	fa02 f303 	lsl.w	r3, r2, r3
 8000d74:	43db      	mvns	r3, r3
 8000d76:	68fa      	ldr	r2, [r7, #12]
 8000d78:	4013      	ands	r3, r2
 8000d7a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	4a40      	ldr	r2, [pc, #256]	; (8000e80 <HAL_GPIO_Init+0x2c0>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d013      	beq.n	8000dac <HAL_GPIO_Init+0x1ec>
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	4a3f      	ldr	r2, [pc, #252]	; (8000e84 <HAL_GPIO_Init+0x2c4>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d00d      	beq.n	8000da8 <HAL_GPIO_Init+0x1e8>
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	4a3e      	ldr	r2, [pc, #248]	; (8000e88 <HAL_GPIO_Init+0x2c8>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d007      	beq.n	8000da4 <HAL_GPIO_Init+0x1e4>
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	4a3d      	ldr	r2, [pc, #244]	; (8000e8c <HAL_GPIO_Init+0x2cc>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d101      	bne.n	8000da0 <HAL_GPIO_Init+0x1e0>
 8000d9c:	2303      	movs	r3, #3
 8000d9e:	e006      	b.n	8000dae <HAL_GPIO_Init+0x1ee>
 8000da0:	2304      	movs	r3, #4
 8000da2:	e004      	b.n	8000dae <HAL_GPIO_Init+0x1ee>
 8000da4:	2302      	movs	r3, #2
 8000da6:	e002      	b.n	8000dae <HAL_GPIO_Init+0x1ee>
 8000da8:	2301      	movs	r3, #1
 8000daa:	e000      	b.n	8000dae <HAL_GPIO_Init+0x1ee>
 8000dac:	2300      	movs	r3, #0
 8000dae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000db0:	f002 0203 	and.w	r2, r2, #3
 8000db4:	0092      	lsls	r2, r2, #2
 8000db6:	4093      	lsls	r3, r2
 8000db8:	68fa      	ldr	r2, [r7, #12]
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000dbe:	492f      	ldr	r1, [pc, #188]	; (8000e7c <HAL_GPIO_Init+0x2bc>)
 8000dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dc2:	089b      	lsrs	r3, r3, #2
 8000dc4:	3302      	adds	r3, #2
 8000dc6:	68fa      	ldr	r2, [r7, #12]
 8000dc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d006      	beq.n	8000de6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000dd8:	4b2d      	ldr	r3, [pc, #180]	; (8000e90 <HAL_GPIO_Init+0x2d0>)
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	492c      	ldr	r1, [pc, #176]	; (8000e90 <HAL_GPIO_Init+0x2d0>)
 8000dde:	69bb      	ldr	r3, [r7, #24]
 8000de0:	4313      	orrs	r3, r2
 8000de2:	600b      	str	r3, [r1, #0]
 8000de4:	e006      	b.n	8000df4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000de6:	4b2a      	ldr	r3, [pc, #168]	; (8000e90 <HAL_GPIO_Init+0x2d0>)
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	69bb      	ldr	r3, [r7, #24]
 8000dec:	43db      	mvns	r3, r3
 8000dee:	4928      	ldr	r1, [pc, #160]	; (8000e90 <HAL_GPIO_Init+0x2d0>)
 8000df0:	4013      	ands	r3, r2
 8000df2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d006      	beq.n	8000e0e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e00:	4b23      	ldr	r3, [pc, #140]	; (8000e90 <HAL_GPIO_Init+0x2d0>)
 8000e02:	685a      	ldr	r2, [r3, #4]
 8000e04:	4922      	ldr	r1, [pc, #136]	; (8000e90 <HAL_GPIO_Init+0x2d0>)
 8000e06:	69bb      	ldr	r3, [r7, #24]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	604b      	str	r3, [r1, #4]
 8000e0c:	e006      	b.n	8000e1c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e0e:	4b20      	ldr	r3, [pc, #128]	; (8000e90 <HAL_GPIO_Init+0x2d0>)
 8000e10:	685a      	ldr	r2, [r3, #4]
 8000e12:	69bb      	ldr	r3, [r7, #24]
 8000e14:	43db      	mvns	r3, r3
 8000e16:	491e      	ldr	r1, [pc, #120]	; (8000e90 <HAL_GPIO_Init+0x2d0>)
 8000e18:	4013      	ands	r3, r2
 8000e1a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d006      	beq.n	8000e36 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e28:	4b19      	ldr	r3, [pc, #100]	; (8000e90 <HAL_GPIO_Init+0x2d0>)
 8000e2a:	689a      	ldr	r2, [r3, #8]
 8000e2c:	4918      	ldr	r1, [pc, #96]	; (8000e90 <HAL_GPIO_Init+0x2d0>)
 8000e2e:	69bb      	ldr	r3, [r7, #24]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	608b      	str	r3, [r1, #8]
 8000e34:	e006      	b.n	8000e44 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e36:	4b16      	ldr	r3, [pc, #88]	; (8000e90 <HAL_GPIO_Init+0x2d0>)
 8000e38:	689a      	ldr	r2, [r3, #8]
 8000e3a:	69bb      	ldr	r3, [r7, #24]
 8000e3c:	43db      	mvns	r3, r3
 8000e3e:	4914      	ldr	r1, [pc, #80]	; (8000e90 <HAL_GPIO_Init+0x2d0>)
 8000e40:	4013      	ands	r3, r2
 8000e42:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d021      	beq.n	8000e94 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e50:	4b0f      	ldr	r3, [pc, #60]	; (8000e90 <HAL_GPIO_Init+0x2d0>)
 8000e52:	68da      	ldr	r2, [r3, #12]
 8000e54:	490e      	ldr	r1, [pc, #56]	; (8000e90 <HAL_GPIO_Init+0x2d0>)
 8000e56:	69bb      	ldr	r3, [r7, #24]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	60cb      	str	r3, [r1, #12]
 8000e5c:	e021      	b.n	8000ea2 <HAL_GPIO_Init+0x2e2>
 8000e5e:	bf00      	nop
 8000e60:	10320000 	.word	0x10320000
 8000e64:	10310000 	.word	0x10310000
 8000e68:	10220000 	.word	0x10220000
 8000e6c:	10210000 	.word	0x10210000
 8000e70:	10120000 	.word	0x10120000
 8000e74:	10110000 	.word	0x10110000
 8000e78:	40021000 	.word	0x40021000
 8000e7c:	40010000 	.word	0x40010000
 8000e80:	40010800 	.word	0x40010800
 8000e84:	40010c00 	.word	0x40010c00
 8000e88:	40011000 	.word	0x40011000
 8000e8c:	40011400 	.word	0x40011400
 8000e90:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e94:	4b0b      	ldr	r3, [pc, #44]	; (8000ec4 <HAL_GPIO_Init+0x304>)
 8000e96:	68da      	ldr	r2, [r3, #12]
 8000e98:	69bb      	ldr	r3, [r7, #24]
 8000e9a:	43db      	mvns	r3, r3
 8000e9c:	4909      	ldr	r1, [pc, #36]	; (8000ec4 <HAL_GPIO_Init+0x304>)
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eae:	fa22 f303 	lsr.w	r3, r2, r3
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	f47f ae8e 	bne.w	8000bd4 <HAL_GPIO_Init+0x14>
  }
}
 8000eb8:	bf00      	nop
 8000eba:	bf00      	nop
 8000ebc:	372c      	adds	r7, #44	; 0x2c
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bc80      	pop	{r7}
 8000ec2:	4770      	bx	lr
 8000ec4:	40010400 	.word	0x40010400

08000ec8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b085      	sub	sp, #20
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	460b      	mov	r3, r1
 8000ed2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	689a      	ldr	r2, [r3, #8]
 8000ed8:	887b      	ldrh	r3, [r7, #2]
 8000eda:	4013      	ands	r3, r2
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d002      	beq.n	8000ee6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	73fb      	strb	r3, [r7, #15]
 8000ee4:	e001      	b.n	8000eea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3714      	adds	r7, #20
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bc80      	pop	{r7}
 8000ef4:	4770      	bx	lr

08000ef6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	b083      	sub	sp, #12
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]
 8000efe:	460b      	mov	r3, r1
 8000f00:	807b      	strh	r3, [r7, #2]
 8000f02:	4613      	mov	r3, r2
 8000f04:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f06:	787b      	ldrb	r3, [r7, #1]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d003      	beq.n	8000f14 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f0c:	887a      	ldrh	r2, [r7, #2]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000f12:	e003      	b.n	8000f1c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f14:	887b      	ldrh	r3, [r7, #2]
 8000f16:	041a      	lsls	r2, r3, #16
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	611a      	str	r2, [r3, #16]
}
 8000f1c:	bf00      	nop
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bc80      	pop	{r7}
 8000f24:	4770      	bx	lr
	...

08000f28 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000f32:	4b08      	ldr	r3, [pc, #32]	; (8000f54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f34:	695a      	ldr	r2, [r3, #20]
 8000f36:	88fb      	ldrh	r3, [r7, #6]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d006      	beq.n	8000f4c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000f3e:	4a05      	ldr	r2, [pc, #20]	; (8000f54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f40:	88fb      	ldrh	r3, [r7, #6]
 8000f42:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000f44:	88fb      	ldrh	r3, [r7, #6]
 8000f46:	4618      	mov	r0, r3
 8000f48:	f000 f806 	bl	8000f58 <HAL_GPIO_EXTI_Callback>
  }
}
 8000f4c:	bf00      	nop
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	40010400 	.word	0x40010400

08000f58 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	4603      	mov	r3, r0
 8000f60:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000f62:	bf00      	nop
 8000f64:	370c      	adds	r7, #12
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bc80      	pop	{r7}
 8000f6a:	4770      	bx	lr

08000f6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b086      	sub	sp, #24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d101      	bne.n	8000f7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e26c      	b.n	8001458 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f003 0301 	and.w	r3, r3, #1
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	f000 8087 	beq.w	800109a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f8c:	4b92      	ldr	r3, [pc, #584]	; (80011d8 <HAL_RCC_OscConfig+0x26c>)
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f003 030c 	and.w	r3, r3, #12
 8000f94:	2b04      	cmp	r3, #4
 8000f96:	d00c      	beq.n	8000fb2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f98:	4b8f      	ldr	r3, [pc, #572]	; (80011d8 <HAL_RCC_OscConfig+0x26c>)
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f003 030c 	and.w	r3, r3, #12
 8000fa0:	2b08      	cmp	r3, #8
 8000fa2:	d112      	bne.n	8000fca <HAL_RCC_OscConfig+0x5e>
 8000fa4:	4b8c      	ldr	r3, [pc, #560]	; (80011d8 <HAL_RCC_OscConfig+0x26c>)
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fb0:	d10b      	bne.n	8000fca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fb2:	4b89      	ldr	r3, [pc, #548]	; (80011d8 <HAL_RCC_OscConfig+0x26c>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d06c      	beq.n	8001098 <HAL_RCC_OscConfig+0x12c>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d168      	bne.n	8001098 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e246      	b.n	8001458 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fd2:	d106      	bne.n	8000fe2 <HAL_RCC_OscConfig+0x76>
 8000fd4:	4b80      	ldr	r3, [pc, #512]	; (80011d8 <HAL_RCC_OscConfig+0x26c>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a7f      	ldr	r2, [pc, #508]	; (80011d8 <HAL_RCC_OscConfig+0x26c>)
 8000fda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fde:	6013      	str	r3, [r2, #0]
 8000fe0:	e02e      	b.n	8001040 <HAL_RCC_OscConfig+0xd4>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d10c      	bne.n	8001004 <HAL_RCC_OscConfig+0x98>
 8000fea:	4b7b      	ldr	r3, [pc, #492]	; (80011d8 <HAL_RCC_OscConfig+0x26c>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a7a      	ldr	r2, [pc, #488]	; (80011d8 <HAL_RCC_OscConfig+0x26c>)
 8000ff0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ff4:	6013      	str	r3, [r2, #0]
 8000ff6:	4b78      	ldr	r3, [pc, #480]	; (80011d8 <HAL_RCC_OscConfig+0x26c>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a77      	ldr	r2, [pc, #476]	; (80011d8 <HAL_RCC_OscConfig+0x26c>)
 8000ffc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001000:	6013      	str	r3, [r2, #0]
 8001002:	e01d      	b.n	8001040 <HAL_RCC_OscConfig+0xd4>
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800100c:	d10c      	bne.n	8001028 <HAL_RCC_OscConfig+0xbc>
 800100e:	4b72      	ldr	r3, [pc, #456]	; (80011d8 <HAL_RCC_OscConfig+0x26c>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a71      	ldr	r2, [pc, #452]	; (80011d8 <HAL_RCC_OscConfig+0x26c>)
 8001014:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001018:	6013      	str	r3, [r2, #0]
 800101a:	4b6f      	ldr	r3, [pc, #444]	; (80011d8 <HAL_RCC_OscConfig+0x26c>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a6e      	ldr	r2, [pc, #440]	; (80011d8 <HAL_RCC_OscConfig+0x26c>)
 8001020:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001024:	6013      	str	r3, [r2, #0]
 8001026:	e00b      	b.n	8001040 <HAL_RCC_OscConfig+0xd4>
 8001028:	4b6b      	ldr	r3, [pc, #428]	; (80011d8 <HAL_RCC_OscConfig+0x26c>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a6a      	ldr	r2, [pc, #424]	; (80011d8 <HAL_RCC_OscConfig+0x26c>)
 800102e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001032:	6013      	str	r3, [r2, #0]
 8001034:	4b68      	ldr	r3, [pc, #416]	; (80011d8 <HAL_RCC_OscConfig+0x26c>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a67      	ldr	r2, [pc, #412]	; (80011d8 <HAL_RCC_OscConfig+0x26c>)
 800103a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800103e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d013      	beq.n	8001070 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001048:	f7ff fc8c 	bl	8000964 <HAL_GetTick>
 800104c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800104e:	e008      	b.n	8001062 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001050:	f7ff fc88 	bl	8000964 <HAL_GetTick>
 8001054:	4602      	mov	r2, r0
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	2b64      	cmp	r3, #100	; 0x64
 800105c:	d901      	bls.n	8001062 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800105e:	2303      	movs	r3, #3
 8001060:	e1fa      	b.n	8001458 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001062:	4b5d      	ldr	r3, [pc, #372]	; (80011d8 <HAL_RCC_OscConfig+0x26c>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800106a:	2b00      	cmp	r3, #0
 800106c:	d0f0      	beq.n	8001050 <HAL_RCC_OscConfig+0xe4>
 800106e:	e014      	b.n	800109a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001070:	f7ff fc78 	bl	8000964 <HAL_GetTick>
 8001074:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001076:	e008      	b.n	800108a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001078:	f7ff fc74 	bl	8000964 <HAL_GetTick>
 800107c:	4602      	mov	r2, r0
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	2b64      	cmp	r3, #100	; 0x64
 8001084:	d901      	bls.n	800108a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001086:	2303      	movs	r3, #3
 8001088:	e1e6      	b.n	8001458 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800108a:	4b53      	ldr	r3, [pc, #332]	; (80011d8 <HAL_RCC_OscConfig+0x26c>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001092:	2b00      	cmp	r3, #0
 8001094:	d1f0      	bne.n	8001078 <HAL_RCC_OscConfig+0x10c>
 8001096:	e000      	b.n	800109a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001098:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f003 0302 	and.w	r3, r3, #2
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d063      	beq.n	800116e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80010a6:	4b4c      	ldr	r3, [pc, #304]	; (80011d8 <HAL_RCC_OscConfig+0x26c>)
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f003 030c 	and.w	r3, r3, #12
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d00b      	beq.n	80010ca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80010b2:	4b49      	ldr	r3, [pc, #292]	; (80011d8 <HAL_RCC_OscConfig+0x26c>)
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f003 030c 	and.w	r3, r3, #12
 80010ba:	2b08      	cmp	r3, #8
 80010bc:	d11c      	bne.n	80010f8 <HAL_RCC_OscConfig+0x18c>
 80010be:	4b46      	ldr	r3, [pc, #280]	; (80011d8 <HAL_RCC_OscConfig+0x26c>)
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d116      	bne.n	80010f8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010ca:	4b43      	ldr	r3, [pc, #268]	; (80011d8 <HAL_RCC_OscConfig+0x26c>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f003 0302 	and.w	r3, r3, #2
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d005      	beq.n	80010e2 <HAL_RCC_OscConfig+0x176>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	691b      	ldr	r3, [r3, #16]
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d001      	beq.n	80010e2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	e1ba      	b.n	8001458 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010e2:	4b3d      	ldr	r3, [pc, #244]	; (80011d8 <HAL_RCC_OscConfig+0x26c>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	695b      	ldr	r3, [r3, #20]
 80010ee:	00db      	lsls	r3, r3, #3
 80010f0:	4939      	ldr	r1, [pc, #228]	; (80011d8 <HAL_RCC_OscConfig+0x26c>)
 80010f2:	4313      	orrs	r3, r2
 80010f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010f6:	e03a      	b.n	800116e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	691b      	ldr	r3, [r3, #16]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d020      	beq.n	8001142 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001100:	4b36      	ldr	r3, [pc, #216]	; (80011dc <HAL_RCC_OscConfig+0x270>)
 8001102:	2201      	movs	r2, #1
 8001104:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001106:	f7ff fc2d 	bl	8000964 <HAL_GetTick>
 800110a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800110c:	e008      	b.n	8001120 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800110e:	f7ff fc29 	bl	8000964 <HAL_GetTick>
 8001112:	4602      	mov	r2, r0
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	1ad3      	subs	r3, r2, r3
 8001118:	2b02      	cmp	r3, #2
 800111a:	d901      	bls.n	8001120 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800111c:	2303      	movs	r3, #3
 800111e:	e19b      	b.n	8001458 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001120:	4b2d      	ldr	r3, [pc, #180]	; (80011d8 <HAL_RCC_OscConfig+0x26c>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f003 0302 	and.w	r3, r3, #2
 8001128:	2b00      	cmp	r3, #0
 800112a:	d0f0      	beq.n	800110e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800112c:	4b2a      	ldr	r3, [pc, #168]	; (80011d8 <HAL_RCC_OscConfig+0x26c>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	695b      	ldr	r3, [r3, #20]
 8001138:	00db      	lsls	r3, r3, #3
 800113a:	4927      	ldr	r1, [pc, #156]	; (80011d8 <HAL_RCC_OscConfig+0x26c>)
 800113c:	4313      	orrs	r3, r2
 800113e:	600b      	str	r3, [r1, #0]
 8001140:	e015      	b.n	800116e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001142:	4b26      	ldr	r3, [pc, #152]	; (80011dc <HAL_RCC_OscConfig+0x270>)
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001148:	f7ff fc0c 	bl	8000964 <HAL_GetTick>
 800114c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800114e:	e008      	b.n	8001162 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001150:	f7ff fc08 	bl	8000964 <HAL_GetTick>
 8001154:	4602      	mov	r2, r0
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	2b02      	cmp	r3, #2
 800115c:	d901      	bls.n	8001162 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800115e:	2303      	movs	r3, #3
 8001160:	e17a      	b.n	8001458 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001162:	4b1d      	ldr	r3, [pc, #116]	; (80011d8 <HAL_RCC_OscConfig+0x26c>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f003 0302 	and.w	r3, r3, #2
 800116a:	2b00      	cmp	r3, #0
 800116c:	d1f0      	bne.n	8001150 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f003 0308 	and.w	r3, r3, #8
 8001176:	2b00      	cmp	r3, #0
 8001178:	d03a      	beq.n	80011f0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	699b      	ldr	r3, [r3, #24]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d019      	beq.n	80011b6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001182:	4b17      	ldr	r3, [pc, #92]	; (80011e0 <HAL_RCC_OscConfig+0x274>)
 8001184:	2201      	movs	r2, #1
 8001186:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001188:	f7ff fbec 	bl	8000964 <HAL_GetTick>
 800118c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800118e:	e008      	b.n	80011a2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001190:	f7ff fbe8 	bl	8000964 <HAL_GetTick>
 8001194:	4602      	mov	r2, r0
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	2b02      	cmp	r3, #2
 800119c:	d901      	bls.n	80011a2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800119e:	2303      	movs	r3, #3
 80011a0:	e15a      	b.n	8001458 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011a2:	4b0d      	ldr	r3, [pc, #52]	; (80011d8 <HAL_RCC_OscConfig+0x26c>)
 80011a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d0f0      	beq.n	8001190 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80011ae:	2001      	movs	r0, #1
 80011b0:	f000 faa6 	bl	8001700 <RCC_Delay>
 80011b4:	e01c      	b.n	80011f0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011b6:	4b0a      	ldr	r3, [pc, #40]	; (80011e0 <HAL_RCC_OscConfig+0x274>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011bc:	f7ff fbd2 	bl	8000964 <HAL_GetTick>
 80011c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011c2:	e00f      	b.n	80011e4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011c4:	f7ff fbce 	bl	8000964 <HAL_GetTick>
 80011c8:	4602      	mov	r2, r0
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	2b02      	cmp	r3, #2
 80011d0:	d908      	bls.n	80011e4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80011d2:	2303      	movs	r3, #3
 80011d4:	e140      	b.n	8001458 <HAL_RCC_OscConfig+0x4ec>
 80011d6:	bf00      	nop
 80011d8:	40021000 	.word	0x40021000
 80011dc:	42420000 	.word	0x42420000
 80011e0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011e4:	4b9e      	ldr	r3, [pc, #632]	; (8001460 <HAL_RCC_OscConfig+0x4f4>)
 80011e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e8:	f003 0302 	and.w	r3, r3, #2
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d1e9      	bne.n	80011c4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f003 0304 	and.w	r3, r3, #4
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	f000 80a6 	beq.w	800134a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011fe:	2300      	movs	r3, #0
 8001200:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001202:	4b97      	ldr	r3, [pc, #604]	; (8001460 <HAL_RCC_OscConfig+0x4f4>)
 8001204:	69db      	ldr	r3, [r3, #28]
 8001206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d10d      	bne.n	800122a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800120e:	4b94      	ldr	r3, [pc, #592]	; (8001460 <HAL_RCC_OscConfig+0x4f4>)
 8001210:	69db      	ldr	r3, [r3, #28]
 8001212:	4a93      	ldr	r2, [pc, #588]	; (8001460 <HAL_RCC_OscConfig+0x4f4>)
 8001214:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001218:	61d3      	str	r3, [r2, #28]
 800121a:	4b91      	ldr	r3, [pc, #580]	; (8001460 <HAL_RCC_OscConfig+0x4f4>)
 800121c:	69db      	ldr	r3, [r3, #28]
 800121e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001222:	60bb      	str	r3, [r7, #8]
 8001224:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001226:	2301      	movs	r3, #1
 8001228:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800122a:	4b8e      	ldr	r3, [pc, #568]	; (8001464 <HAL_RCC_OscConfig+0x4f8>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001232:	2b00      	cmp	r3, #0
 8001234:	d118      	bne.n	8001268 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001236:	4b8b      	ldr	r3, [pc, #556]	; (8001464 <HAL_RCC_OscConfig+0x4f8>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a8a      	ldr	r2, [pc, #552]	; (8001464 <HAL_RCC_OscConfig+0x4f8>)
 800123c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001240:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001242:	f7ff fb8f 	bl	8000964 <HAL_GetTick>
 8001246:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001248:	e008      	b.n	800125c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800124a:	f7ff fb8b 	bl	8000964 <HAL_GetTick>
 800124e:	4602      	mov	r2, r0
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	2b64      	cmp	r3, #100	; 0x64
 8001256:	d901      	bls.n	800125c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001258:	2303      	movs	r3, #3
 800125a:	e0fd      	b.n	8001458 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800125c:	4b81      	ldr	r3, [pc, #516]	; (8001464 <HAL_RCC_OscConfig+0x4f8>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001264:	2b00      	cmp	r3, #0
 8001266:	d0f0      	beq.n	800124a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	2b01      	cmp	r3, #1
 800126e:	d106      	bne.n	800127e <HAL_RCC_OscConfig+0x312>
 8001270:	4b7b      	ldr	r3, [pc, #492]	; (8001460 <HAL_RCC_OscConfig+0x4f4>)
 8001272:	6a1b      	ldr	r3, [r3, #32]
 8001274:	4a7a      	ldr	r2, [pc, #488]	; (8001460 <HAL_RCC_OscConfig+0x4f4>)
 8001276:	f043 0301 	orr.w	r3, r3, #1
 800127a:	6213      	str	r3, [r2, #32]
 800127c:	e02d      	b.n	80012da <HAL_RCC_OscConfig+0x36e>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	68db      	ldr	r3, [r3, #12]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d10c      	bne.n	80012a0 <HAL_RCC_OscConfig+0x334>
 8001286:	4b76      	ldr	r3, [pc, #472]	; (8001460 <HAL_RCC_OscConfig+0x4f4>)
 8001288:	6a1b      	ldr	r3, [r3, #32]
 800128a:	4a75      	ldr	r2, [pc, #468]	; (8001460 <HAL_RCC_OscConfig+0x4f4>)
 800128c:	f023 0301 	bic.w	r3, r3, #1
 8001290:	6213      	str	r3, [r2, #32]
 8001292:	4b73      	ldr	r3, [pc, #460]	; (8001460 <HAL_RCC_OscConfig+0x4f4>)
 8001294:	6a1b      	ldr	r3, [r3, #32]
 8001296:	4a72      	ldr	r2, [pc, #456]	; (8001460 <HAL_RCC_OscConfig+0x4f4>)
 8001298:	f023 0304 	bic.w	r3, r3, #4
 800129c:	6213      	str	r3, [r2, #32]
 800129e:	e01c      	b.n	80012da <HAL_RCC_OscConfig+0x36e>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	2b05      	cmp	r3, #5
 80012a6:	d10c      	bne.n	80012c2 <HAL_RCC_OscConfig+0x356>
 80012a8:	4b6d      	ldr	r3, [pc, #436]	; (8001460 <HAL_RCC_OscConfig+0x4f4>)
 80012aa:	6a1b      	ldr	r3, [r3, #32]
 80012ac:	4a6c      	ldr	r2, [pc, #432]	; (8001460 <HAL_RCC_OscConfig+0x4f4>)
 80012ae:	f043 0304 	orr.w	r3, r3, #4
 80012b2:	6213      	str	r3, [r2, #32]
 80012b4:	4b6a      	ldr	r3, [pc, #424]	; (8001460 <HAL_RCC_OscConfig+0x4f4>)
 80012b6:	6a1b      	ldr	r3, [r3, #32]
 80012b8:	4a69      	ldr	r2, [pc, #420]	; (8001460 <HAL_RCC_OscConfig+0x4f4>)
 80012ba:	f043 0301 	orr.w	r3, r3, #1
 80012be:	6213      	str	r3, [r2, #32]
 80012c0:	e00b      	b.n	80012da <HAL_RCC_OscConfig+0x36e>
 80012c2:	4b67      	ldr	r3, [pc, #412]	; (8001460 <HAL_RCC_OscConfig+0x4f4>)
 80012c4:	6a1b      	ldr	r3, [r3, #32]
 80012c6:	4a66      	ldr	r2, [pc, #408]	; (8001460 <HAL_RCC_OscConfig+0x4f4>)
 80012c8:	f023 0301 	bic.w	r3, r3, #1
 80012cc:	6213      	str	r3, [r2, #32]
 80012ce:	4b64      	ldr	r3, [pc, #400]	; (8001460 <HAL_RCC_OscConfig+0x4f4>)
 80012d0:	6a1b      	ldr	r3, [r3, #32]
 80012d2:	4a63      	ldr	r2, [pc, #396]	; (8001460 <HAL_RCC_OscConfig+0x4f4>)
 80012d4:	f023 0304 	bic.w	r3, r3, #4
 80012d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	68db      	ldr	r3, [r3, #12]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d015      	beq.n	800130e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012e2:	f7ff fb3f 	bl	8000964 <HAL_GetTick>
 80012e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012e8:	e00a      	b.n	8001300 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012ea:	f7ff fb3b 	bl	8000964 <HAL_GetTick>
 80012ee:	4602      	mov	r2, r0
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	1ad3      	subs	r3, r2, r3
 80012f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d901      	bls.n	8001300 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80012fc:	2303      	movs	r3, #3
 80012fe:	e0ab      	b.n	8001458 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001300:	4b57      	ldr	r3, [pc, #348]	; (8001460 <HAL_RCC_OscConfig+0x4f4>)
 8001302:	6a1b      	ldr	r3, [r3, #32]
 8001304:	f003 0302 	and.w	r3, r3, #2
 8001308:	2b00      	cmp	r3, #0
 800130a:	d0ee      	beq.n	80012ea <HAL_RCC_OscConfig+0x37e>
 800130c:	e014      	b.n	8001338 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800130e:	f7ff fb29 	bl	8000964 <HAL_GetTick>
 8001312:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001314:	e00a      	b.n	800132c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001316:	f7ff fb25 	bl	8000964 <HAL_GetTick>
 800131a:	4602      	mov	r2, r0
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	f241 3288 	movw	r2, #5000	; 0x1388
 8001324:	4293      	cmp	r3, r2
 8001326:	d901      	bls.n	800132c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001328:	2303      	movs	r3, #3
 800132a:	e095      	b.n	8001458 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800132c:	4b4c      	ldr	r3, [pc, #304]	; (8001460 <HAL_RCC_OscConfig+0x4f4>)
 800132e:	6a1b      	ldr	r3, [r3, #32]
 8001330:	f003 0302 	and.w	r3, r3, #2
 8001334:	2b00      	cmp	r3, #0
 8001336:	d1ee      	bne.n	8001316 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001338:	7dfb      	ldrb	r3, [r7, #23]
 800133a:	2b01      	cmp	r3, #1
 800133c:	d105      	bne.n	800134a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800133e:	4b48      	ldr	r3, [pc, #288]	; (8001460 <HAL_RCC_OscConfig+0x4f4>)
 8001340:	69db      	ldr	r3, [r3, #28]
 8001342:	4a47      	ldr	r2, [pc, #284]	; (8001460 <HAL_RCC_OscConfig+0x4f4>)
 8001344:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001348:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	69db      	ldr	r3, [r3, #28]
 800134e:	2b00      	cmp	r3, #0
 8001350:	f000 8081 	beq.w	8001456 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001354:	4b42      	ldr	r3, [pc, #264]	; (8001460 <HAL_RCC_OscConfig+0x4f4>)
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f003 030c 	and.w	r3, r3, #12
 800135c:	2b08      	cmp	r3, #8
 800135e:	d061      	beq.n	8001424 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	69db      	ldr	r3, [r3, #28]
 8001364:	2b02      	cmp	r3, #2
 8001366:	d146      	bne.n	80013f6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001368:	4b3f      	ldr	r3, [pc, #252]	; (8001468 <HAL_RCC_OscConfig+0x4fc>)
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800136e:	f7ff faf9 	bl	8000964 <HAL_GetTick>
 8001372:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001374:	e008      	b.n	8001388 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001376:	f7ff faf5 	bl	8000964 <HAL_GetTick>
 800137a:	4602      	mov	r2, r0
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	2b02      	cmp	r3, #2
 8001382:	d901      	bls.n	8001388 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001384:	2303      	movs	r3, #3
 8001386:	e067      	b.n	8001458 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001388:	4b35      	ldr	r3, [pc, #212]	; (8001460 <HAL_RCC_OscConfig+0x4f4>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001390:	2b00      	cmp	r3, #0
 8001392:	d1f0      	bne.n	8001376 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6a1b      	ldr	r3, [r3, #32]
 8001398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800139c:	d108      	bne.n	80013b0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800139e:	4b30      	ldr	r3, [pc, #192]	; (8001460 <HAL_RCC_OscConfig+0x4f4>)
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	492d      	ldr	r1, [pc, #180]	; (8001460 <HAL_RCC_OscConfig+0x4f4>)
 80013ac:	4313      	orrs	r3, r2
 80013ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013b0:	4b2b      	ldr	r3, [pc, #172]	; (8001460 <HAL_RCC_OscConfig+0x4f4>)
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6a19      	ldr	r1, [r3, #32]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c0:	430b      	orrs	r3, r1
 80013c2:	4927      	ldr	r1, [pc, #156]	; (8001460 <HAL_RCC_OscConfig+0x4f4>)
 80013c4:	4313      	orrs	r3, r2
 80013c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013c8:	4b27      	ldr	r3, [pc, #156]	; (8001468 <HAL_RCC_OscConfig+0x4fc>)
 80013ca:	2201      	movs	r2, #1
 80013cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ce:	f7ff fac9 	bl	8000964 <HAL_GetTick>
 80013d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013d4:	e008      	b.n	80013e8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013d6:	f7ff fac5 	bl	8000964 <HAL_GetTick>
 80013da:	4602      	mov	r2, r0
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	d901      	bls.n	80013e8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80013e4:	2303      	movs	r3, #3
 80013e6:	e037      	b.n	8001458 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013e8:	4b1d      	ldr	r3, [pc, #116]	; (8001460 <HAL_RCC_OscConfig+0x4f4>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d0f0      	beq.n	80013d6 <HAL_RCC_OscConfig+0x46a>
 80013f4:	e02f      	b.n	8001456 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013f6:	4b1c      	ldr	r3, [pc, #112]	; (8001468 <HAL_RCC_OscConfig+0x4fc>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013fc:	f7ff fab2 	bl	8000964 <HAL_GetTick>
 8001400:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001402:	e008      	b.n	8001416 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001404:	f7ff faae 	bl	8000964 <HAL_GetTick>
 8001408:	4602      	mov	r2, r0
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	2b02      	cmp	r3, #2
 8001410:	d901      	bls.n	8001416 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001412:	2303      	movs	r3, #3
 8001414:	e020      	b.n	8001458 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001416:	4b12      	ldr	r3, [pc, #72]	; (8001460 <HAL_RCC_OscConfig+0x4f4>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d1f0      	bne.n	8001404 <HAL_RCC_OscConfig+0x498>
 8001422:	e018      	b.n	8001456 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	69db      	ldr	r3, [r3, #28]
 8001428:	2b01      	cmp	r3, #1
 800142a:	d101      	bne.n	8001430 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800142c:	2301      	movs	r3, #1
 800142e:	e013      	b.n	8001458 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001430:	4b0b      	ldr	r3, [pc, #44]	; (8001460 <HAL_RCC_OscConfig+0x4f4>)
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6a1b      	ldr	r3, [r3, #32]
 8001440:	429a      	cmp	r2, r3
 8001442:	d106      	bne.n	8001452 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800144e:	429a      	cmp	r2, r3
 8001450:	d001      	beq.n	8001456 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e000      	b.n	8001458 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001456:	2300      	movs	r3, #0
}
 8001458:	4618      	mov	r0, r3
 800145a:	3718      	adds	r7, #24
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	40021000 	.word	0x40021000
 8001464:	40007000 	.word	0x40007000
 8001468:	42420060 	.word	0x42420060

0800146c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d101      	bne.n	8001480 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	e0d0      	b.n	8001622 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001480:	4b6a      	ldr	r3, [pc, #424]	; (800162c <HAL_RCC_ClockConfig+0x1c0>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 0307 	and.w	r3, r3, #7
 8001488:	683a      	ldr	r2, [r7, #0]
 800148a:	429a      	cmp	r2, r3
 800148c:	d910      	bls.n	80014b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800148e:	4b67      	ldr	r3, [pc, #412]	; (800162c <HAL_RCC_ClockConfig+0x1c0>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f023 0207 	bic.w	r2, r3, #7
 8001496:	4965      	ldr	r1, [pc, #404]	; (800162c <HAL_RCC_ClockConfig+0x1c0>)
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	4313      	orrs	r3, r2
 800149c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800149e:	4b63      	ldr	r3, [pc, #396]	; (800162c <HAL_RCC_ClockConfig+0x1c0>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 0307 	and.w	r3, r3, #7
 80014a6:	683a      	ldr	r2, [r7, #0]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d001      	beq.n	80014b0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80014ac:	2301      	movs	r3, #1
 80014ae:	e0b8      	b.n	8001622 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 0302 	and.w	r3, r3, #2
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d020      	beq.n	80014fe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f003 0304 	and.w	r3, r3, #4
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d005      	beq.n	80014d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014c8:	4b59      	ldr	r3, [pc, #356]	; (8001630 <HAL_RCC_ClockConfig+0x1c4>)
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	4a58      	ldr	r2, [pc, #352]	; (8001630 <HAL_RCC_ClockConfig+0x1c4>)
 80014ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80014d2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 0308 	and.w	r3, r3, #8
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d005      	beq.n	80014ec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014e0:	4b53      	ldr	r3, [pc, #332]	; (8001630 <HAL_RCC_ClockConfig+0x1c4>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	4a52      	ldr	r2, [pc, #328]	; (8001630 <HAL_RCC_ClockConfig+0x1c4>)
 80014e6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80014ea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014ec:	4b50      	ldr	r3, [pc, #320]	; (8001630 <HAL_RCC_ClockConfig+0x1c4>)
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	494d      	ldr	r1, [pc, #308]	; (8001630 <HAL_RCC_ClockConfig+0x1c4>)
 80014fa:	4313      	orrs	r3, r2
 80014fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	2b00      	cmp	r3, #0
 8001508:	d040      	beq.n	800158c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	2b01      	cmp	r3, #1
 8001510:	d107      	bne.n	8001522 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001512:	4b47      	ldr	r3, [pc, #284]	; (8001630 <HAL_RCC_ClockConfig+0x1c4>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d115      	bne.n	800154a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e07f      	b.n	8001622 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	2b02      	cmp	r3, #2
 8001528:	d107      	bne.n	800153a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800152a:	4b41      	ldr	r3, [pc, #260]	; (8001630 <HAL_RCC_ClockConfig+0x1c4>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d109      	bne.n	800154a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e073      	b.n	8001622 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800153a:	4b3d      	ldr	r3, [pc, #244]	; (8001630 <HAL_RCC_ClockConfig+0x1c4>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 0302 	and.w	r3, r3, #2
 8001542:	2b00      	cmp	r3, #0
 8001544:	d101      	bne.n	800154a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e06b      	b.n	8001622 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800154a:	4b39      	ldr	r3, [pc, #228]	; (8001630 <HAL_RCC_ClockConfig+0x1c4>)
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f023 0203 	bic.w	r2, r3, #3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	4936      	ldr	r1, [pc, #216]	; (8001630 <HAL_RCC_ClockConfig+0x1c4>)
 8001558:	4313      	orrs	r3, r2
 800155a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800155c:	f7ff fa02 	bl	8000964 <HAL_GetTick>
 8001560:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001562:	e00a      	b.n	800157a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001564:	f7ff f9fe 	bl	8000964 <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001572:	4293      	cmp	r3, r2
 8001574:	d901      	bls.n	800157a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e053      	b.n	8001622 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800157a:	4b2d      	ldr	r3, [pc, #180]	; (8001630 <HAL_RCC_ClockConfig+0x1c4>)
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f003 020c 	and.w	r2, r3, #12
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	429a      	cmp	r2, r3
 800158a:	d1eb      	bne.n	8001564 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800158c:	4b27      	ldr	r3, [pc, #156]	; (800162c <HAL_RCC_ClockConfig+0x1c0>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 0307 	and.w	r3, r3, #7
 8001594:	683a      	ldr	r2, [r7, #0]
 8001596:	429a      	cmp	r2, r3
 8001598:	d210      	bcs.n	80015bc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800159a:	4b24      	ldr	r3, [pc, #144]	; (800162c <HAL_RCC_ClockConfig+0x1c0>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f023 0207 	bic.w	r2, r3, #7
 80015a2:	4922      	ldr	r1, [pc, #136]	; (800162c <HAL_RCC_ClockConfig+0x1c0>)
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015aa:	4b20      	ldr	r3, [pc, #128]	; (800162c <HAL_RCC_ClockConfig+0x1c0>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0307 	and.w	r3, r3, #7
 80015b2:	683a      	ldr	r2, [r7, #0]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d001      	beq.n	80015bc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	e032      	b.n	8001622 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 0304 	and.w	r3, r3, #4
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d008      	beq.n	80015da <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015c8:	4b19      	ldr	r3, [pc, #100]	; (8001630 <HAL_RCC_ClockConfig+0x1c4>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	4916      	ldr	r1, [pc, #88]	; (8001630 <HAL_RCC_ClockConfig+0x1c4>)
 80015d6:	4313      	orrs	r3, r2
 80015d8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0308 	and.w	r3, r3, #8
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d009      	beq.n	80015fa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80015e6:	4b12      	ldr	r3, [pc, #72]	; (8001630 <HAL_RCC_ClockConfig+0x1c4>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	691b      	ldr	r3, [r3, #16]
 80015f2:	00db      	lsls	r3, r3, #3
 80015f4:	490e      	ldr	r1, [pc, #56]	; (8001630 <HAL_RCC_ClockConfig+0x1c4>)
 80015f6:	4313      	orrs	r3, r2
 80015f8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80015fa:	f000 f821 	bl	8001640 <HAL_RCC_GetSysClockFreq>
 80015fe:	4602      	mov	r2, r0
 8001600:	4b0b      	ldr	r3, [pc, #44]	; (8001630 <HAL_RCC_ClockConfig+0x1c4>)
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	091b      	lsrs	r3, r3, #4
 8001606:	f003 030f 	and.w	r3, r3, #15
 800160a:	490a      	ldr	r1, [pc, #40]	; (8001634 <HAL_RCC_ClockConfig+0x1c8>)
 800160c:	5ccb      	ldrb	r3, [r1, r3]
 800160e:	fa22 f303 	lsr.w	r3, r2, r3
 8001612:	4a09      	ldr	r2, [pc, #36]	; (8001638 <HAL_RCC_ClockConfig+0x1cc>)
 8001614:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001616:	4b09      	ldr	r3, [pc, #36]	; (800163c <HAL_RCC_ClockConfig+0x1d0>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4618      	mov	r0, r3
 800161c:	f7ff f960 	bl	80008e0 <HAL_InitTick>

  return HAL_OK;
 8001620:	2300      	movs	r3, #0
}
 8001622:	4618      	mov	r0, r3
 8001624:	3710      	adds	r7, #16
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	40022000 	.word	0x40022000
 8001630:	40021000 	.word	0x40021000
 8001634:	080017bc 	.word	0x080017bc
 8001638:	20000004 	.word	0x20000004
 800163c:	20000008 	.word	0x20000008

08001640 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001640:	b490      	push	{r4, r7}
 8001642:	b08a      	sub	sp, #40	; 0x28
 8001644:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001646:	4b2a      	ldr	r3, [pc, #168]	; (80016f0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001648:	1d3c      	adds	r4, r7, #4
 800164a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800164c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001650:	f240 2301 	movw	r3, #513	; 0x201
 8001654:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001656:	2300      	movs	r3, #0
 8001658:	61fb      	str	r3, [r7, #28]
 800165a:	2300      	movs	r3, #0
 800165c:	61bb      	str	r3, [r7, #24]
 800165e:	2300      	movs	r3, #0
 8001660:	627b      	str	r3, [r7, #36]	; 0x24
 8001662:	2300      	movs	r3, #0
 8001664:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001666:	2300      	movs	r3, #0
 8001668:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800166a:	4b22      	ldr	r3, [pc, #136]	; (80016f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	f003 030c 	and.w	r3, r3, #12
 8001676:	2b04      	cmp	r3, #4
 8001678:	d002      	beq.n	8001680 <HAL_RCC_GetSysClockFreq+0x40>
 800167a:	2b08      	cmp	r3, #8
 800167c:	d003      	beq.n	8001686 <HAL_RCC_GetSysClockFreq+0x46>
 800167e:	e02d      	b.n	80016dc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001680:	4b1d      	ldr	r3, [pc, #116]	; (80016f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001682:	623b      	str	r3, [r7, #32]
      break;
 8001684:	e02d      	b.n	80016e2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	0c9b      	lsrs	r3, r3, #18
 800168a:	f003 030f 	and.w	r3, r3, #15
 800168e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001692:	4413      	add	r3, r2
 8001694:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001698:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d013      	beq.n	80016cc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80016a4:	4b13      	ldr	r3, [pc, #76]	; (80016f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	0c5b      	lsrs	r3, r3, #17
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80016b2:	4413      	add	r3, r2
 80016b4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80016b8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	4a0e      	ldr	r2, [pc, #56]	; (80016f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016be:	fb02 f203 	mul.w	r2, r2, r3
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80016c8:	627b      	str	r3, [r7, #36]	; 0x24
 80016ca:	e004      	b.n	80016d6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	4a0b      	ldr	r2, [pc, #44]	; (80016fc <HAL_RCC_GetSysClockFreq+0xbc>)
 80016d0:	fb02 f303 	mul.w	r3, r2, r3
 80016d4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80016d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d8:	623b      	str	r3, [r7, #32]
      break;
 80016da:	e002      	b.n	80016e2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80016dc:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016de:	623b      	str	r3, [r7, #32]
      break;
 80016e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016e2:	6a3b      	ldr	r3, [r7, #32]
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3728      	adds	r7, #40	; 0x28
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bc90      	pop	{r4, r7}
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	080017ac 	.word	0x080017ac
 80016f4:	40021000 	.word	0x40021000
 80016f8:	007a1200 	.word	0x007a1200
 80016fc:	003d0900 	.word	0x003d0900

08001700 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001700:	b480      	push	{r7}
 8001702:	b085      	sub	sp, #20
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001708:	4b0a      	ldr	r3, [pc, #40]	; (8001734 <RCC_Delay+0x34>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a0a      	ldr	r2, [pc, #40]	; (8001738 <RCC_Delay+0x38>)
 800170e:	fba2 2303 	umull	r2, r3, r2, r3
 8001712:	0a5b      	lsrs	r3, r3, #9
 8001714:	687a      	ldr	r2, [r7, #4]
 8001716:	fb02 f303 	mul.w	r3, r2, r3
 800171a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800171c:	bf00      	nop
  }
  while (Delay --);
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	1e5a      	subs	r2, r3, #1
 8001722:	60fa      	str	r2, [r7, #12]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d1f9      	bne.n	800171c <RCC_Delay+0x1c>
}
 8001728:	bf00      	nop
 800172a:	bf00      	nop
 800172c:	3714      	adds	r7, #20
 800172e:	46bd      	mov	sp, r7
 8001730:	bc80      	pop	{r7}
 8001732:	4770      	bx	lr
 8001734:	20000004 	.word	0x20000004
 8001738:	10624dd3 	.word	0x10624dd3

0800173c <__libc_init_array>:
 800173c:	b570      	push	{r4, r5, r6, lr}
 800173e:	2600      	movs	r6, #0
 8001740:	4d0c      	ldr	r5, [pc, #48]	; (8001774 <__libc_init_array+0x38>)
 8001742:	4c0d      	ldr	r4, [pc, #52]	; (8001778 <__libc_init_array+0x3c>)
 8001744:	1b64      	subs	r4, r4, r5
 8001746:	10a4      	asrs	r4, r4, #2
 8001748:	42a6      	cmp	r6, r4
 800174a:	d109      	bne.n	8001760 <__libc_init_array+0x24>
 800174c:	f000 f822 	bl	8001794 <_init>
 8001750:	2600      	movs	r6, #0
 8001752:	4d0a      	ldr	r5, [pc, #40]	; (800177c <__libc_init_array+0x40>)
 8001754:	4c0a      	ldr	r4, [pc, #40]	; (8001780 <__libc_init_array+0x44>)
 8001756:	1b64      	subs	r4, r4, r5
 8001758:	10a4      	asrs	r4, r4, #2
 800175a:	42a6      	cmp	r6, r4
 800175c:	d105      	bne.n	800176a <__libc_init_array+0x2e>
 800175e:	bd70      	pop	{r4, r5, r6, pc}
 8001760:	f855 3b04 	ldr.w	r3, [r5], #4
 8001764:	4798      	blx	r3
 8001766:	3601      	adds	r6, #1
 8001768:	e7ee      	b.n	8001748 <__libc_init_array+0xc>
 800176a:	f855 3b04 	ldr.w	r3, [r5], #4
 800176e:	4798      	blx	r3
 8001770:	3601      	adds	r6, #1
 8001772:	e7f2      	b.n	800175a <__libc_init_array+0x1e>
 8001774:	080017cc 	.word	0x080017cc
 8001778:	080017cc 	.word	0x080017cc
 800177c:	080017cc 	.word	0x080017cc
 8001780:	080017d0 	.word	0x080017d0

08001784 <memset>:
 8001784:	4603      	mov	r3, r0
 8001786:	4402      	add	r2, r0
 8001788:	4293      	cmp	r3, r2
 800178a:	d100      	bne.n	800178e <memset+0xa>
 800178c:	4770      	bx	lr
 800178e:	f803 1b01 	strb.w	r1, [r3], #1
 8001792:	e7f9      	b.n	8001788 <memset+0x4>

08001794 <_init>:
 8001794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001796:	bf00      	nop
 8001798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800179a:	bc08      	pop	{r3}
 800179c:	469e      	mov	lr, r3
 800179e:	4770      	bx	lr

080017a0 <_fini>:
 80017a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017a2:	bf00      	nop
 80017a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017a6:	bc08      	pop	{r3}
 80017a8:	469e      	mov	lr, r3
 80017aa:	4770      	bx	lr
